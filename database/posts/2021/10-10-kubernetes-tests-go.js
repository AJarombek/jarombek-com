/**
 * Script for the MongoDB Shell.
 * @author Andrew Jarombek
 * @since 9/26/2021
 */

connection = new Mongo();
db = connection.getDB("jarombekcom");

content = [
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" These days, most of my application infrastructure exists on ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog?query=docker&page=1"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" Docker",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" containers, orchestrated by ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog?query=kubernetes&page=1"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Kubernetes",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  My  AWS account has a Kubernetes cluster, which is hosted using EKS (Elastic Kubernetes Service).  Since two of my production applications (",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"jarombek.com",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://saintsxctf.com/"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saintsxctf.com",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":") run on this Kubernetes cluster, the health of their infrastructure is critical.  To help ensure that the Kubernetes cluster is running properly, I created tests which check the state of my Kubernetes objects and ensure that they exist on the EKS cluster as expected. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" This article explores my Kubernetes test suite, which is written in Go and leverages the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nkubernetes/client-go"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Kubernetes Go Client",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  It also describes how the test suite is run on an automated schedule, alerting me when test failures occur. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Testing Kubernetes"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Testing Kubernetes",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" My Kubernetes infrastructure and test code is spread across multiple repositories, most notably in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/jarombek-com-infrastructure/tree/master/test-k8s"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"jarombek-com-infrastructure",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-infrastructure/tree/master/test-k8s"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saints-xctf-infrastructure",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/global-aws-infrastructure/tree/master/test-k8s"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"global-aws-infrastructure",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". In this article I focus on the infrastructure tests for ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"jarombek.com",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which happens to be the website you are currently viewing!  ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"jarombek.com",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" has the following Kubernetes infrastructure: ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/10-10-21-jarombek-com-k8s.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" My Kubernetes infrastructure is created in an automated fashion using ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog?query=terraform&page=1"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Terraform",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  Specifically, the Kubernetes objects for ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"jarombek.com",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" are configured in two Terraform modules: ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\njarombek-com-infrastructure/tree/master/jarombek-com-kubernetes"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"jarombek-com-kubernetes",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/jarombek-com-infrastructure/tree/master/jarombek-com-kubernetes-ingress"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" jarombek-com-kubernetes-ingress",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  Both these modules have test code associated with them. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The Kubernetes test code, written using the Kubernetes Go Client, resides in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\njarombek-com-infrastructure/tree/master/test-k8s"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"test-k8s",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory.  The test code is a Go module, configured by ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/jarombek-com-infrastructure/blob/master/test-k8s/go.mod"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"go.mod",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The Go module definition file specifies the module name, the Go version used, and the external Go module requirements. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":null,
        "value":"module github.com/ajarombek/jarombek-com-infrastructure/test-k8s\n\ngo 1.14\n\nrequire (\n\tgithub.com/ajarombek/cloud-modules/kubernetes-test-functions v0.2.10\n\tk8s.io/apimachinery v0.17.3-beta.0\n\tk8s.io/client-go v0.17.0\n)\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The Go version used in the module is ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"1.14",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and the module name is ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"github.com/ajarombek/ jarombek-com-infrastructure/test-k8s",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"; a concatenation of the GitHub repository URL and the directory path to the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"go.mod",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file.  Code in the module is dependent on two Kubernetes modules: ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"k8s.io/apimachinery",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"k8s.io/client-go",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  There is also one dependency called ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"github.com/ajarombek/cloud-modules/kubernetes-test-functions",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which is a Go module of my own.  This module contains reusable functions for writing Kubernetes tests in Go, and can be found in my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/cloud-modules/tree/master/kubernetes-test-functions"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"cloud-modules",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" repository.  I will discuss this Go module in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog/oct-10-2021-kubernetes-tests-go"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"separate article",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"subtitle",
        "attributes":{
            "title":"Configuring Kubernetes Tests"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Configuring Kubernetes Tests",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The entrypoint to the test suite is ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/jarombek-com-infrastructure/blob/master/\ntest-k8s/main_test.go"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"main_test.go",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  It configures the test suite and initializes the Kubernetes client. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Go"
        },
        "value":"package main\n\nimport (\n\t\"k8s.io/client-go/kubernetes\"\n\t\"os\"\n\t\"testing\"\n)\n\nvar ClientSet *kubernetes.Clientset\n\nvar env = os.Getenv(\"TEST_ENV\")\nvar namespace = GetNamespace()\n\n// Setup code for the test suite.\nfunc TestMain(m *testing.M) {\n\tkubeconfig, inCluster := ParseCommandLineArguments()\n\tClientSet = GetClientSet(kubeconfig, inCluster)\n\tos.Exit(m.Run())\n}\n\nfunc GetNamespace() string {\n\tif env == \"dev\" {\n\t\treturn \"jarombek-com-dev\"\n\t} else {\n\t\treturn \"jarombek-com\"\n\t}\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" There are multiple pieces to unpack here.  First, the entrypoint of the test suite is ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TestMain()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which is invoked when the CLI command ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"go test",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is run.  The three lines of code in ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TestMain()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" parse command line arguments, initialize the Kubernetes client, and run the test suite, respectively. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" More specifically, the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ParseCommandLineArguments()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function, which exists in a separate ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/jarombek-com-infrastructure/blob/master/test-k8s/client.go#L49-L57"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" client.go",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file, looks for ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"--kubeconfig",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"--incluster",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" command line flags, and assigns them to variables. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Go"
        },
        "value":"func ParseCommandLineArguments() (*string, *string) {\n\tvar kubeconfig *string = flag.String(\"kubeconfig\", \"\", \"Absolute path to the kubeconfig file.\")\n\tvar inCluster *string = flag.String(\"incluster\", \"\", \"Whether or not the tests are running in a cluster.\")\n\tflag.Parse()\n\n\treturn kubeconfig, inCluster\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" There are two ways to initialize the Kubernetes client and authenticate it with the Kubernetes API: with a ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"kubeconfig",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file outside a Kubernetes cluster or with a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ServiceAccount",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" within a Kubernetes cluster.  These two techniques are referred to as ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nkubernetes/client-go/tree/master/examples/out-of-cluster-client-configuration"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"out of cluster configuration",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/kubernetes/client-go/tree/master/examples/in-cluster-client-configuration"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"in-cluster configuration",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", respectively",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"1,2",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  In my ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ParseCommandLineArguments()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function, the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"kubeconfig",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" flag refers to out of cluster configuration and the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"incluster",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" flag refers to in-cluster configuration. The value of the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"kubeconfig",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" flag is a string, representing the file path to a ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"kubeconfig",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file, which is used for authentication.  The value of the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"incluster",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" flag is simply a boolean.  These flags can be used from the CLI like so: ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Bash"
        },
        "value":"# Both authentication approaches.\n\n# Run tests outside a Kubernetes cluster, authenticating with a kubeconfig file.\ngo test --kubeconfig /path/to/kubeconfig\n\n# Run tests inside a Kubernetes cluster, authenticating with a ServiceAccount.\ngo test --incluster true\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" On the second line of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TestMain()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"GetClientSet()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function is invoked, with ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"kubeconfig",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"incluster",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" passed as arguments.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"GetClientSet()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a custom function declared in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/jarombek-com-infrastructure/blob/master/test-k8s/client.go#L16-L47"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"client.go",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" which configures and initializes the Kubernetes client either in cluster or out of cluster. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Go"
        },
        "value":"import (\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/rest\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n)\n\nfunc GetClientSet(kubeconfig *string, inCluster *string) *kubernetes.Clientset {\n\tvar config *rest.Config\n\tvar err error\n\n\tif *inCluster == \"true\" {\n\t\tconfig, err = rest.InClusterConfig()\n\n\t\tif err != nil {\n\t\t\tpanic(err.Error())\n\t\t}\n\t} else {\n\t\tconfig, err = clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n\n\t\tif err != nil {\n\t\t\tpanic(err.Error())\n\t\t}\n\t}\n\n\tclientset, err := kubernetes.NewForConfig(config)\n\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\treturn clientset\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" If the tests are run in the Kubernetes cluster, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"rest.InClusterConfig()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is invoked.  Otherwise, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"clientcmd.BuildConfigFromFlags()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is invoked. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" With the Kubernetes client configured, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"MainTest()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" ends with a call to ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"os.Exit(m.Run())",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which runs all the tests.  However, before running the tests, there are two final important parts of the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/jarombek-com-infrastructure/\nblob/master/test-k8s/main_test.go"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"main_test.go",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file.  First, the environment that the tests are run in is gathered from the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TEST_ENV",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" environment variable in the line ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"var env = os.Getenv(\"TEST_ENV\")",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  I have infrastructure in development and production environments, so this configuration helps me test Kubernetes objects in both environments separately. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Kubernetes objects for my ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"jarombek.com",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" website exist in two different namespaces.  For the production environment, objects exist in the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"jarombek-com",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" namespace.  For the development environment, objects exist in the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"jarombek-com-dev",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" namespace. The following code in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/jarombek-com-infrastructure/blob/master/test-k8s/\nmain_test.go"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"main_test.go",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" initializes a global ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"namespace",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" variable with the proper namespace depending on the environment being tested.  This variable is accessible from the test code. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Go"
        },
        "value":"var env = os.Getenv(\"TEST_ENV\")\nvar namespace = GetNamespace()\n\nfunc GetNamespace() string {\n\tif env == \"dev\" {\n\t\treturn \"jarombek-com-dev\"\n\t} else {\n\t\treturn \"jarombek-com\"\n\t}\n}\n",
        "children":null
    },
    {
        "el":"subtitle",
        "attributes":{
            "title":"Configuring Kubernetes Tests"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Writing Kubernetes Tests",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" At this point, the Kubernetes testing environment is all configured.  The Kubernetes tests reside in two files: ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/jarombek-com-infrastructure/blob/master/test-k8s/namespace_test.go"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" namespace_test.go",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/jarombek-com-infrastructure/blob/master/test-k8s/\njarombek_com_test.go"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"jarombek_com_test.go",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"namespace_test.go",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" checks if the namespace for the infrastructure contains the expected number of Kubernetes objects.  ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"jarombek_com_test.go",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" tests those objects in more detail. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" First, let's look at the namespace tests. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Go"
        },
        "value":"// namespace_test.go\n\npackage main\n\nimport (\n\tk8sfuncs \"github.com/ajarombek/cloud-modules/kubernetes-test-functions\"\n\t\"testing\"\n)\n\n// TestJarombekComNamespaceDeploymentCount determines if the number of 'Deployment' objects in the 'jarombek-com'\n// (or 'jarombek-com-dev') namespace is as expected.\nfunc TestJarombekComNamespaceDeploymentCount(t *testing.T) {\n\tk8sfuncs.ExpectedDeploymentCount(t, ClientSet, namespace, 2)\n}\n\n// TestJarombekComNamespaceServiceCount determines if the expected number of Service objects exist in the 'jarombek-com'\n// (or 'jarombek-com-dev') namespace.\nfunc TestJarombekComNamespaceServiceCount(t *testing.T) {\n\tk8sfuncs.NamespaceServiceCount(t, ClientSet, namespace, 2)\n}\n\n// TestJarombekComNamespaceIngressCount determines if the number of 'Ingress' objects in the 'jarombek-com'\n// (or 'jarombek-com-dev') namespace is as expected.\nfunc TestJarombekComNamespaceIngressCount(t *testing.T) {\n\tk8sfuncs.NamespaceIngressCount(t, ClientSet, namespace, 1)\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" There are three tests specified in this code, each encapsulated in a function.  The first test confirms that two ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Deployment",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" objects exist in the namespace, the second test confirms that two ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Service",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" objects exist in the namespace, and the third test confirms that one ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Ingress",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" object exists in the namespace.  The actual testing assertions are made in helper functions located in my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/cloud-modules/tree/master/\nkubernetes-test-functions"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"kubernetes-test-functions",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" Go module.  These helper functions are accessed through the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"k8sfuncs",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" variable. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The three reusable functions used in the namespace test code - ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ExpectedDeploymentCount()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"NamespaceServiceCount()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"NamespaceIngressCount()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" - are located in the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"kubernetes-test-functions",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" module ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/cloud-modules/blob/master/\nkubernetes-test-functions/main.go#L19-L42"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"here",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/cloud-modules/blob/master/\nkubernetes-test-functions/main.go#L308-L331"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"here",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/cloud-modules/blob/\nmaster/kubernetes-test-functions/main.go#L365-L388"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"here",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ExpectedDeploymentCount()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function is shown below. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Go"
        },
        "value":"// ExpectedDeploymentCount determines if the number of 'Deployment' objects in a namespace is as expected.\nfunc ExpectedDeploymentCount(t *testing.T, clientset *kubernetes.Clientset, namespace string, expectedCount int) {\n\tdeployments, err := clientset.AppsV1().Deployments(namespace).List(v1meta.ListOptions{})\n\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tvar actualCount = len(deployments.Items)\n\tif actualCount == expectedCount {\n\t\tt.Logf(\n\t\t\t\"The expected number of Deployments exist in the '%v' namespace.  Expected %v, got %v.\",\n\t\t\tnamespace,\n\t\t\texpectedCount,\n\t\t\tactualCount,\n\t\t)\n\t} else {\n\t\tt.Errorf(\n\t\t\t\"An unexpected number of Deployments exist in the '%v' namespace.  Expected %v, got %v.\",\n\t\t\tnamespace,\n\t\t\texpectedCount,\n\t\t\tactualCount,\n\t\t)\n\t}\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The first parameter of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ExpectedDeploymentCount()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"t",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", is of type ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"*testing.T",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which contains the state of the testing suite and also enables test logging.  The second parameter, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"clientset",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", is the Kubernetes client.  The last two parameters, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"namespace",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"expectedCount",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", determine the namespace to check for ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Deployment",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" objects and specify the expected deployment count, respectively. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The first line of the function body uses the Kubernetes client to get all the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Deployment",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" objects in a namespace.  Then, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"len(deployments.Items)",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"  determines the number of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Deployment",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" objects, followed by an ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"if",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" statement which checks if the actual number of objects matches the expected number of objects.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"t.Logf",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is used to log a successful test, and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"t.Errorf",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is used to log a failed test. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"NamespaceServiceCount()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"NamespaceIngressCount()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" have similar implementations. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Now, let's look at the remaining tests. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Go"
        },
        "value":"import (\n\t\"fmt\"\n\tk8sfuncs \"github.com/ajarombek/cloud-modules/kubernetes-test-functions\"\n\tv1meta \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"testing\"\n)\n\n// TestJarombekComDeploymentExists determines if a deployment exists in the 'jarombek-com' (or 'jarombek-com-dev')\n// namespace with the name 'jarombek-com'.\nfunc TestJarombekComDeploymentExists(t *testing.T) {\n\tk8sfuncs.DeploymentExists(t, ClientSet, \"jarombek-com\", namespace)\n}\n\n// TestJarombekComDeploymentErrorFree determines if the 'jarombek-com' deployment is running error free.\nfunc TestJarombekComDeploymentErrorFree(t *testing.T) {\n\tk8sfuncs.DeploymentStatusCheck(t, ClientSet, \"jarombek-com\", namespace, true, true, 1, 1, 1, 0)\n}\n\n// TestJarombekComServiceExists determines if a NodePort Service with the name 'jarombek-com' exists in the\n// 'jarombek-com' (or 'jarombek-com-dev') namespace.\nfunc TestJarombekComServiceExists(t *testing.T) {\n\tk8sfuncs.ServiceExists(t, ClientSet, \"jarombek-com\", namespace, \"NodePort\")\n}\n\n// TestJarombekComDatabaseDeploymentExists determines if a deployment exists in the 'jarombek-com'\n// (or 'jarombek-com-dev') namespace with the name 'jarombek-com-database'.\nfunc TestJarombekComDatabaseDeploymentExists(t *testing.T) {\n\tk8sfuncs.DeploymentExists(t, ClientSet, \"jarombek-com-database\", namespace)\n}\n\n// TestJarombekComDatabaseDeploymentErrorFree determines if the 'jarombek-com-database' deployment is running\n// error free.\nfunc TestJarombekComDatabaseDeploymentErrorFree(t *testing.T) {\n\tk8sfuncs.DeploymentStatusCheck(t, ClientSet, \"jarombek-com-database\", namespace, true, true, 1, 1, 1, 0)\n}\n\n// TestJarombekComDatabaseServiceExists determines if a NodePort Service with the name 'jarombek-com-database' exists\n// in the 'jarombek-com' (or 'jarombek-com-dev') namespace.\nfunc TestJarombekComDatabaseServiceExists(t *testing.T) {\n\tk8sfuncs.ServiceExists(t, ClientSet, \"jarombek-com-database\", namespace, \"NodePort\")\n}\n\n// TestJarombekComIngressExists determines if an ingress object exists in the 'jarombek-com' (or 'jarombek-com-dev')\n// namespace with the name 'jarombek-com-ingress'.\nfunc TestJarombekComIngressExists(t *testing.T) {\n\tk8sfuncs.IngressExists(t, ClientSet, namespace, \"jarombek-com-ingress\")\n}\n\n// TestJarombekComIngressAnnotations determines if the 'jarombek-com-ingress' Ingress object contains the expected annotations.\nfunc TestJarombekComIngressAnnotations(t *testing.T) {\n\tingress, err := ClientSet.NetworkingV1beta1().Ingresses(namespace).Get(\"jarombek-com-ingress\", v1meta.GetOptions{})\n\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tvar hostname string\n\tvar environment string\n\tif env == \"dev\" {\n\t\thostname = \"dev.jarombek.com,www.dev.jarombek.com\"\n\t\tenvironment = \"development\"\n\t} else {\n\t\thostname = \"jarombek.com,www.jarombek.com\"\n\t\tenvironment = \"production\"\n\t}\n\n\tannotations := ingress.Annotations\n\n\t// Kubernetes Ingress class and ExternalDNS annotations\n\tk8sfuncs.AnnotationsEqual(t, annotations, \"kubernetes.io/ingress.class\", \"alb\")\n\tk8sfuncs.AnnotationsEqual(t, annotations, \"external-dns.alpha.kubernetes.io/hostname\", hostname)\n\n\t// ALB Ingress annotations\n\tk8sfuncs.AnnotationsEqual(t, annotations, \"alb.ingress.kubernetes.io/actions.ssl-redirect\", \"{\\\"Type\\\": \\\"redirect\\\", \\\"RedirectConfig\\\": {\\\"Protocol\\\": \\\"HTTPS\\\", \\\"Port\\\": \\\"443\\\", \\\"StatusCode\\\": \\\"HTTP_301\\\"}}\")\n\tk8sfuncs.AnnotationsEqual(t, annotations, \"alb.ingress.kubernetes.io/backend-protocol\", \"HTTP\")\n\tk8sfuncs.AnnotationsEqual(t, annotations, \"alb.ingress.kubernetes.io/scheme\", \"internet-facing\")\n\tk8sfuncs.AnnotationsEqual(t, annotations, \"alb.ingress.kubernetes.io/listen-ports\", \"[{\\\"HTTP\\\":80}, {\\\"HTTPS\\\":443}]\")\n\tk8sfuncs.AnnotationsEqual(t, annotations, \"alb.ingress.kubernetes.io/healthcheck-path\", \"/\")\n\tk8sfuncs.AnnotationsEqual(t, annotations, \"alb.ingress.kubernetes.io/healthcheck-protocol\", \"HTTP\")\n\tk8sfuncs.AnnotationsEqual(t, annotations, \"alb.ingress.kubernetes.io/target-type\", \"instance\")\n\tk8sfuncs.AnnotationsEqual(t, annotations, \"alb.ingress.kubernetes.io/tags\", \"Name=jarombek-com-load-balancer,Application=jarombek-com,Environment=\" + environment)\n\n\t// ALB Ingress annotations pattern matching\n\tuuidPattern := \"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\"\n\tcertificateArnPattern := fmt.Sprintf(\"arn:aws:acm:us-east-1:739088120071:certificate/%s\", uuidPattern)\n\tcertificatesPattern := fmt.Sprintf(\"^%s,%s$\", certificateArnPattern, certificateArnPattern)\n\tk8sfuncs.AnnotationsMatchPattern(t, annotations, \"alb.ingress.kubernetes.io/certificate-arn\", certificatesPattern)\n\n\tsgPattern := \"^sg-[0-9a-f]+$\"\n\tk8sfuncs.AnnotationsMatchPattern(t, annotations, \"alb.ingress.kubernetes.io/security-groups\", sgPattern)\n\n\tsubnetsPattern := \"^subnet-[0-9a-f]+,subnet-[0-9a-f]+$\"\n\tk8sfuncs.AnnotationsMatchPattern(t, annotations, \"alb.ingress.kubernetes.io/subnets\", subnetsPattern)\n\n\texpectedAnnotationsLength := 13\n\tannotationLength := len(annotations)\n\n\tif expectedAnnotationsLength == annotationLength {\n\t\tt.Logf(\n\t\t\t\"JarombekCom Ingress has the expected number of annotations.  Expected %v, got %v.\",\n\t\t\texpectedAnnotationsLength,\n\t\t\tannotationLength,\n\t\t)\n\t} else {\n\t\tt.Errorf(\n\t\t\t\"JarombekCom Ingress does not have the expected number of annotations.  Expected %v, got %v.\",\n\t\t\texpectedAnnotationsLength,\n\t\t\tannotationLength,\n\t\t)\n\t}\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" One again, all these tests use reusable functions.  However, the final function, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TestJarombekComIngressAnnotations()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", also performs some logic of its own.  Since ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TestJarombekComIngressAnnotations()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is different from the rest, let's analyze it in more detail.  In Kubernetes, objects can have annotations, which are key-value pairs containing metadata about an object.  For ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Ingress",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" objects, these annotations can have important information which directs ingress controllers to build certain networking infrastructure.  In my case, the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Ingress",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" object is utilized by an AWS Ingress Controller (now known as an AWS Load Balancer Controller), which creates a load balancer in my AWS account, directing traffic to my website's Kubernetes objects.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TestJarombekComIngressAnnotations()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" tests that the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Ingress",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" object contains the proper annotations, so that the load balancer is created as expected. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TestJarombekComIngressAnnotations()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" starts by using the Kubernetes client to get the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Ingress",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" object for my website; storing it in an ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ingress",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" variable.  If the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Ingress",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" object isn't found, an error is stored in an ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"err",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" variable. The test ensures that the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Ingress",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" object exists before continuing with  the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"if err != nil {}",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" code block.  The remainder of the test checks that annotations on the object have expected values and that the number of annotations on the object is as expected. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Automating Test Runs"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Automating Test Runs",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" My Kubernetes tests run every morning in Jenkins jobs.  There are two Jenkins jobs - one for the development environment and one for the production environment.  My test code is run from within the Kubernetes cluster, since the Jenkins jobs are configured to run on Kubernetes pods.  The Jenkins jobs also send me email alerts with  statuses of the tests, allowing me to know whether everything is operational when I read emails in the morning.  You can view the code for these Jenkins jobs on ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/global-jenkins-jobs/tree/master/jarombek-com/\ninfrastructure/jarombek-com-kubernetes-infrastructure-test"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"GitHub",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/10-10-21-kubernetes-test-jenkins.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Conclusions"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Conclusions",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Automated tests of my Kubernetes infrastructure has proven to be an effective safety blanket.  It's great to see successful test results in the morning and feel reassured that the infrastructure for my websites are working as expected. While you can write tests for Kubernetes infrastructure in multiple languages, the Go client library is very easy to work with; I highly recommend it.  As previously mentioned, you can view all my Kubernetes test code in my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/jarombek-com-infrastructure/tree/master/test-k8s"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"jarombek-com-infrastructure",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-infrastructure/tree/master/test-k8s"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saints-xctf-infrastructure",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/global-aws-infrastructure/tree/master/test-k8s"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"global-aws-infrastructure",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" repositories. ",
                "children":null
            }
        ]
    }
];

preview = content.slice(0, 2);

postName = "oct-10-2021-kubernetes-tests-go";
postDate = new Date('2021-10-10T12:00:00');
existingPost = db.posts.findOne({name: postName});

postViews = (existingPost) ? existingPost.views : 0;

db.posts.remove({name: postName});
db.posts_content.remove({name: postName});

db.posts.insertOne({
    name: postName,
    title: "Writing Kubernetes Tests with Go",
    description: `This article explores my Kubernetes test suite, which is written in Go and leverages the Kubernetes 
        Go Client.  It also describes how the test suite is run on an automated schedule, alerting me when test 
        failures occur.`,
    date: postDate,
    type: "Retrospective",
    views: postViews,
    tags: [
        {
            name: "Kubernetes",
            picture: "https://asset.jarombek.com/logos/k8s.png",
            color: "k8s"
        },
        {
            name: "Go",
            picture: "https://asset.jarombek.com/logos/go.png",
            color: "go"
        },
        {
            name: "Jenkins",
            picture: "https://asset.jarombek.com/logos/jenkins.png",
            color: "jenkins"
        },
        {
            name: "AWS EKS",
            picture: "https://asset.jarombek.com/logos/eks.png",
            color: "eks"
        }
    ],
    preview,
    previewString: JSON.stringify(preview),
    sources: [
        {
            startName: "\"Authenticating outside the cluster\", ",
            endName: "",
            linkName: "https://github.com/kubernetes/client-go/tree/master/examples/out-of-cluster-client-configuration",
            link: "https://github.com/kubernetes/client-go/tree/master/examples/out-of-cluster-client-configuration"
        },
        {
            startName: "\"Authenticating inside the cluster\", ",
            endName: "",
            linkName: "https://github.com/kubernetes/client-go/tree/master/examples/in-cluster-client-configuration",
            link: "https://github.com/kubernetes/client-go/tree/master/examples/in-cluster-client-configuration"
        },
        {
            startName: "\"Go testing: Type T\", ",
            endName: "",
            linkName: "https://pkg.go.dev/testing#T",
            link: "https://pkg.go.dev/testing#T"
        }
    ]
});

db.posts_content.insertOne({
    name: postName,
    date: postDate,
    content,
    contentString: JSON.stringify(content)
});
