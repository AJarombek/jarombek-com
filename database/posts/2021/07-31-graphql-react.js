/**
 * Script for the MongoDB Shell.
 * @author Andrew Jarombek
 * @since 7/28/2021
 */

connection = new Mongo();
db = connection.getDB("jarombekcom");

content = [
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Last year, I started using ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog?query=graphql&page=1"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"GraphQL",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" at my job.  I decided to create some GraphQL prototypes in my spare time, to get better acquainted with the GraphQL ecosystem.  In 2018 I learned the basics of GraphQL and wrote ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog/aug-5-2018-graphql-pt1"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"two",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"  ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog/aug-9-2018-graphql-pt2"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"articles",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" about my experience, but never dove into using GraphQL in real world applications.  The ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/graphql-react-prototype"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"GraphQL React prototype",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" discussed in this article along with my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/apollo-client-server-prototype"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Apollo prototype",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" are the beginnings of that production application journey.  In the future, I plan on using GraphQL for the API layer of my applications. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The GraphQL prototype discussed in this article is a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog?query=react&page=1"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"React",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" front-end application that connects to a GitHub GraphQL API.  The API provides details about my repositories, and React displays those details in a dashboard.  The dashboard is shown below. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/7-31-21-dashboard.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The dashboard has a responsive design, so its also viewable on tablets and mobile screens. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/7-31-21-dashboard-mobile.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"GraphQL and React Application Code"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"GraphQL and React Application Code",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The React code for the dashboard is broken down into multiple components, with each box displayed on the screen being its own component.  Components use ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog/aug-2-2021-less"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Less",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" for their stylesheet language.  Less, similar to ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog?query=sass&page=1"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Sass",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", is a CSS preprocessor, which adds features on top of the base CSS language. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Each component makes a GraphQL query to the GitHub API, collecting the data it wishes to display.  The front-end code doesn't use a GraphQL client library to make the API calls, instead just using an HTTP client library called ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"axios",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  In an upcoming article I'll discuss my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/apollo-client-server-prototype"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Apollo prototype",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which uses the Apollo Client library to make API calls. While the HTTP client library is a bare-bones approach, it is still fully capable of handling GraphQL APIs. ",
                "children":null
            }
        ]
    },
    {
        "el":"subtitle",
        "attributes":{
            "title":"Repository Count Component"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Repository Count Component",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Let's look at one of the basic components displayed on the UI.  The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"RepositoryCount",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" component has the responsibility of displaying the number of repositories in my GitHub account on the dashboard. It has a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/graphql-react-prototype/blob/master/src/components/items/RepositoryCount.js"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" RepositoryCount.js",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file for the React component code and a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\ngraphql-react-prototype/blob/master/src/components/items/RepositoryCount.less"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"RepositoryCount.less",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file for the stylesheet code. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/7-31-21-repository-count-component.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"RepositoryCount",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" component makes a GraphQL API call to the GitHub API after the component first renders.  Once a result is returned from the API, the component re-renders with the number of repositories in my GitHub account. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JavaScript"
        },
        "value":"import React, { useEffect, useState } from 'react';\nimport { getPersonalRepositories } from '../../datasource/GraphQL';\n\nconst RepositoryCount = () => {\n  const [repoCount, setRepoCount] = useState(0);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getGraphQLResult() {\n      const result = await getPersonalRepositories('AJarombek');\n\n      if (result.data.data) {\n        setRepoCount(result.data.data.user.repositories.totalCount);\n        setError(null);\n      } else {\n        setError(result.data.errors[0].message);\n      }\n    }\n\n    getGraphQLResult();\n  }, []);\n\n  return (\n    <div className=\"items repository-count\">\n      {error\n        ? (\n          <div className=\"error\">\n            <h6>{error}</h6>\n          </div>\n        )\n        : (\n          <>\n            <h3>Number of Repositories</h3>\n            <h2>{repoCount}</h2>\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default RepositoryCount;\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The repository count is held in a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"useState",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" React hook with the name ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"repoCount",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". This value is changed using the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"setRepoCount",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function. When ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"setRepoCount",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is invoked, the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"RepositoryCount",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" component re-renders and displays the repository count in an HTML ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"<h2>",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" element. If an error occurs while making the API call, the error message is stored in the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"error",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" variable, which is also managed by a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"useState",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" React hook. If the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"error",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" variable contains a string value, it is displayed in an HTML ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"<h6>",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" element. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"useEffect",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" React hook is invoked once after the component first renders.  It's purpose is to make the GitHub API call and store its response in a state variable.  The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"getGraphQLResult()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function helps performs this task.  The first line of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"getGraphQLResult()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" calls a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"getPersonalRepositories()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function, which is imported from another file. I extracted all the API client logic into a separate file, which I will discuss later. The API call is asynchronous, which is why I use the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"await",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" keyword. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"getPersonalRepositories()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" returns a JavaScript object with the API response, and the remainder of the logic in ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"getGraphQLResult()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" handles the response in the case of a success or failure. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" If the API call is successful and the response object contains data, the repository count is assigned to the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"repoCount",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" variable using the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"setRepoCount",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function. If the API call is unsuccessful and contains no data, the API returns an error message.  This error message is assigned to the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"error",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" variable using the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"setError",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" As previously mentioned, the API client logic is encapsulated in a separate file called ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/graphql-react-prototype/blob/master/src/datasource/GraphQL.js"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"GraphQL.js",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"getPersonalRepositories()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which is used in the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"RepositoryCount",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" component, is defined as follows: ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JavaScript"
        },
        "value":"const getPersonalRepositories = (username) => request(getPersonalRepositoriesQuery, { username });\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"getPersonalRepositories()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" takes a GitHub username as an argument (in my case ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"AJarombek",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":") and then invokes a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"request()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"request()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" takes two arguments: a GraphQL query string and a JavaScript object containing variables passed to the GraphQL query.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"request()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" uses the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"axios",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" HTTP client library to make the GraphQL API request to the GitHub API. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JavaScript"
        },
        "value":"import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.github.com/graphql',\n  headers: {\n    Authorization: `bearer ${process.env.GITHUB_ACCESS_TOKEN}`,\n  },\n});\n\nconst request = (query, variables) => instance.post('', { query, variables });\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" As you can see, both the GraphQL query and the query variables are passed in an HTTP POST body to ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"https://api.github.com/graphql",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The final piece of the puzzle is the GraphQL query.  The first argument to ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"request()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" in the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"getPersonalRepositories()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function body was a variable named ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"getPersonalRepositoriesQuery",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". This variable is a string containing a GraphQL query. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JavaScript"
        },
        "value":"const getPersonalRepositoriesQuery = `\n  query PersonalRepositories($username: String!) {\n    user(login: $username) {\n      repositories(isFork: false, isLocked: false, privacy: PUBLIC, affiliations: OWNER,\n                  ownerAffiliations:OWNER, first: 100) {\n        totalCount\n      }\n    }\n  }\n`;\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" All the code I've shown, from the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"RepositoryCount",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" component to the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"axios",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" client, executes a GraphQL query and renders the result in a web browser. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" For additional perspective, shown below is the GraphQL query executed from an HTTP UI client.  In this case I'm using ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://insomnia.rest/"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Insomnia",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", but you can use Postman or any other client for HTTP requests. The important point is that GraphQL queries aren't doing anything too complex, they are simply HTTP requests. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/7-31-21-graphql-query.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"subtitle",
        "attributes":{
            "title":"Most Total Commits Component"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Most Total Commits Component",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Let's briefly look at one more component.  The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TotalCommits",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" component displays the five repositories with the most code commits in my GitHub account.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TotalCommits",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"  has a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/graphql-react-prototype/blob/master/src/components/items/TotalCommits.js"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" TotalCommits.js",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file for the React component code and a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\ngraphql-react-prototype/blob/master/src/components/items/TotalCommits.less"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"TotalCommits.less",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file for the stylesheet code. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/7-31-21-total-commits-component.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TotalCommits",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a bit more complex because it needs to manipulate the data received from the GraphQL API, and then display the data in a list. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JavaScript"
        },
        "value":"import React, { useEffect, useState } from 'react';\nimport { getTotalCommits } from '../../datasource/GraphQL';\n\nconst TotalCommits = () => {\n  const [repoCommits, setRepoCommits] = useState([]);\n  const [error, setError] = useState(null);\n\n  const generateMostTotalCommits = (repositories) => {\n    const repositoriesByCommits = [];\n\n    for (const repository of repositories) {\n      repositoriesByCommits.push({\n        name: repository.node.name,\n        commits: repository.node.ref?.target?.history?.totalCount ?? 0,\n      });\n    }\n\n    repositoriesByCommits.sort((a, b) => b.commits - a.commits);\n\n    setRepoCommits(repositoriesByCommits.slice(0, 5));\n    setError(null);\n  };\n\n  useEffect(() => {\n    async function getGraphQLResult() {\n      const result = await getTotalCommits('AJarombek');\n\n      if (result.data.data) {\n        generateMostTotalCommits(result.data.data.user.repositories.edges);\n      } else {\n        setError(result.data.errors[0].message);\n      }\n    }\n\n    getGraphQLResult();\n  }, []);\n\n  return (\n    <div className=\"items total-commits\">\n      {error\n        ? (\n          <div className=\"error\">\n            <h6>{error}</h6>\n          </div>\n        )\n        : (\n          <>\n            <h2>Most Total Commits</h2>\n            { repoCommits.map((repository) => (\n              <div className=\"commits\" key={repository.name}>\n                <p>{repository.name}</p>\n                <p>{repository.commits}</p>\n              </div>\n            ))}\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default TotalCommits;\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" In many ways, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TotalCommits",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is structured the same way as ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"RepositoryCount",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  It renders either an error message or data from the GitHub API. It utilizes ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"useState()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"useEffect()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" React hooks to retrieve and store the API data after the components initial render. There are two main things that differentiate ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TotalCommits",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" from ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"RepositoryCount",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". First, it restructures and sorts the data retrieved from the API in a separate function called ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"generateMostTotalCommits()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". After this function runs, an array of five JavaScript objects are stored in a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"repoCommits",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" variable, representing the five repositories in my GitHub account with the most commits.  Second, the component renders each of these repositories in their own HTML ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"<div>",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" element, displaying the repository name and the number of commits. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TotalCommits",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" invokes a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"getTotalCommits",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function to retrieve the repository information from the GitHub GraphQL API.  This function exists in the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/graphql-react-prototype/blob/master/src/datasource/GraphQL.js#L92-L115"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"GraphQL.js",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file. The GraphQL query for this component is shown below, invoked from the Insomnia HTTP UI Client. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/7-31-21-graphql-query-2.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" All the components in my GraphQL React prototype follow a similar structure to ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TotalCommits",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"RepositoryCount",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". The rest can be viewed on ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/graphql-react-prototype/tree/master/src/components/items"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"GitHub",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Application Infrastructure"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Application Infrastructure",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The GraphQL React prototype uses Kubernetes infrastructure hosted on AWS.  This infrastructure is built with Terraform, and has the following structure: ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/7-31-21-infrastructure.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" There are three Terraform modules for the infrastructure: ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"acm",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" for ACM certificates, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ecr",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" for ECR repositories containing Docker images, and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"k8s",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" for the Kubernetes infrastructure.  They exist in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/graphql-react-prototype/tree/master/infra/acm"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"acm",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/graphql-react-prototype/tree/master/infra/ecr"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"ecr",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/graphql-react-prototype/tree/master/infra/k8s"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"k8s",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directories, respectively. The Terraform infrastructure is built and torn down in Jenkins pipelines, specifically ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/global-jenkins-jobs/tree/master/prototypes/graphql-react-prototype/\ncreate-acm-infrastructure"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"create-acm-infrastructure",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/global-jenkins-jobs/\ntree/master/prototypes/graphql-react-prototype/create-ecr-infrastructure"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"create-ecr-infrastructure",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/global-jenkins-jobs/tree/master/prototypes/graphql-react-prototype/\ncreate-k8s-infrastructure"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"create-k8s-infrastructure",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/global-jenkins-jobs/\ntree/master/prototypes/graphql-react-prototype/destroy-acm-infrastructure"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"destroy-acm-infrastructure",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/global-jenkins-jobs/tree/master/prototypes/graphql-react-prototype/\ndestroy-ecr-infrastructure"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"destroy-ecr-infrastructure",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nglobal-jenkins-jobs/tree/master/prototypes/graphql-react-prototype/destroy-k8s-infrastructure"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"destroy-k8s-infrastructure",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/7-31-21-jenkins-pipelines.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The Kubernetes infrastructure for the GraphQL React prototype is built with two Docker images.  Their Dockerfiles are defined in the GitHub repository.  The first image is a base image, containing all the npm dependencies needed by the React application.  This Docker image is defined in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/graphql-react-prototype/\nblob/master/base.dockerfile"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"base.dockerfile",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Dockerfile"
        },
        "value":"FROM node:14.4.0\n\nCOPY . app\n\nWORKDIR app\nRUN npm install\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The second image is an application image.  It builds the React application and creates an nginx proxy to route traffic entering the container to the application.  This Docker image is defined in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/graphql-react-prototype/blob/master/app.dockerfile"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"app.dockerfile",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Dockerfile"
        },
        "value":"FROM 739088120071.dkr.ecr.us-east-1.amazonaws.com/graphql-react-prototype-base:latest AS base\n\nWORKDIR app\nRUN npm run build\n\nFROM nginx AS host\n\nRUN rm /etc/nginx/conf.d/default.conf\nCOPY nginx.conf /etc/nginx/conf.d\n\nCOPY --from=base /app/dist /usr/share/nginx/html\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The nginx proxy has the following configuration, defined in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\ngraphql-react-prototype/blob/master/nginx.conf"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"nginx.conf",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Nginx"
        },
        "value":"server {\n    listen 80;\n\n    location / {\n        root /usr/share/nginx/html;\n        try_files $uri /index.html;\n    }\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" I don't discuss the infrastructure any further in this article, but I have lots of articles on ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog?query=Terraform&page=1"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Terraform",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog?query=AWS&page=1"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"AWS",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog?query=Kubernetes&page=1"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Kubernetes",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog?query=Docker&page=1"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Docker",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog?query=Jenkins&page=1"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Jenkins",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" if you want to learn more about the underlying  technologies. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Application Test Code"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Application Test Code",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The GraphQL React prototype has unit tests and snapshot tests with full code coverage.  Tests exist in the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/graphql-react-prototype/tree/master/test"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"test",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory and are written with ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog?query=Jest&page=1"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Jest",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  I wrote an ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog/feb-5-2020-react-jest-enzyme"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"article",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" about writing integration, unit, and snapshot tests for React with Jest if you want to learn more. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Jest unit and snapshot tests for the GraphQL React prototype are run in Jenkins on a daily schedule.  The Jenkins pipeline code for these  tests exists in my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/global-jenkins-jobs/tree/master/prototypes/graphql-react-prototype/\ngraphql-react-prototype-test"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"global-jenkins-jobs",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" repository. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/7-31-21-jenkins-test-pipeline.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Conclusions"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Conclusions",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Creating this GraphQL React prototype was a great exercise and helped me learn how to use GraphQL in a frontend application.  However, I likely won't repeat the technology choice of using an HTTP client library instead of a GraphQL client library for front-ends dealing extensively with GraphQL APIs.  In many ways, I made things more difficult for myself by using ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"axios",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" instead of a GraphQL library.  I have ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\napollo-client-server-prototype"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"another prototype application",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" which uses the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"apollo",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" GraphQL client library with React, and it made integrating GraphQL with React quite a bit easier. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" All of the application code discussed in this article is available on ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\ngraphql-react-prototype"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"GitHub",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    }
];

preview = content.slice(0, 2);

postName = "jul-31-2021-graphql-react";
postDate = new Date('2021-07-31T12:00:00');
existingPost = db.posts.findOne({name: postName});

postViews = (existingPost) ? existingPost.views : 0;

db.posts.remove({name: postName});
db.posts_content.remove({name: postName});

db.posts.insertOne({
    name: postName,
    title: "Building a GraphQL React Prototype",
    description: `Last year, I started using GraphQL at my job.  I decided to create some GraphQL prototypes in my 
        spare time, to get better acquainted with the GraphQL ecosystem.`,
    date: postDate,
    type: "Retrospective",
    views: postViews,
    tags: [
        {
            name: "GraphQL",
            picture: "https://asset.jarombek.com/logos/graphql.png",
            color: "graphql"
        },
        {
            name: "React",
            picture: "https://asset.jarombek.com/logos/react.png",
            color: "react"
        },
        {
            name: "JavaScript",
            picture: "https://asset.jarombek.com/logos/js.png",
            color: "javascript"
        },
        {
            name: "AWS",
            picture: "https://asset.jarombek.com/logos/aws.png",
            color: "aws"
        },
        {
            name: "Kubernetes",
            picture: "https://asset.jarombek.com/logos/k8s.png",
            color: "k8s"
        },
        {
            name: "Docker",
            picture: "https://asset.jarombek.com/logos/docker.png",
            color: "docker"
        },
        {
            name: "Nginx",
            picture: "https://asset.jarombek.com/logos/nginx.png",
            color: "nginx"
        }
    ],
    preview,
    previewString: JSON.stringify(preview),
    sources: []
});

db.posts_content.insertOne({
    name: postName,
    date: postDate,
    content,
    contentString: JSON.stringify(content)
});
