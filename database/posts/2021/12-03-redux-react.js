/**
 * Script for the MongoDB Shell.
 * @author Andrew Jarombek
 * @since 11/20/2021
 */

connection = new Mongo();
db = connection.getDB("jarombekcom");

content = [
    {
        "el":"note",
        "attributes":{
            "type":"info"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" This is part of a series of articles on SaintsXCTF Version 2.0. The first article in the series provides an ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog/jun-14-2021-saints-xctf-v2-overview"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"overview of the application",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  You ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"DO NOT",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" need to read prior articles in the series to fully understand this article. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Redux is a state management pattern that is commonly used in complex React applications.  Redux, based on the Flux design pattern, is helpful when application state is shared between many pages of a website and is updated frequently",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"1",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  In my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://saintsxctf.com/"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saintsxctf.com",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" website, Redux stores and uses application state across all my webpages.  SaintsXCTF is a good example of a website that can benefit from Redux;  it needs login information, user preferences, team memberships, group memberships, and more to be shared amongst all pages. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" In this article, I start by going over the basics of Redux.  I'll also explain the “ducks pattern”, which is an approach to writing Redux code.  Then, I'll walk through the Redux configuration and code in my SaintsXCTF application.  All the code for my SaintsXCTF web application is available in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-web"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"GitHub",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" repository. ",
                "children":null
            }
        ]
    },
    {
        "el":"subtitle",
        "attributes":{
            "title":"SaintsXCTF Version 2.0 Articles"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"SaintsXCTF Version 2.0 Articles",
                "children":null
            }
        ]
    },
    {
        "el":"ul",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/jun-14-2021-saints-xctf-v2-overview"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Architectural Overview",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/jun-14-2021-saints-xctf-v2-overview"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"AWS Infrastructure",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/oct-25-2021-saints-xctf-v2-k8s-infrastructure"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Kubernetes Infrastructure",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/nov-1-2021-saints-xctf-v2-react-web-app"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"React Web Application Overview",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/nov-15-2021-react-typescript"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Web Application React and TypeScript",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"strong",
                        "attributes":null,
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Web Application Redux State Configuration",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/aug-11-2021-cypress-typescript"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Web Application Cypress E2E Tests",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/jun-30-2021-react-jss"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Web Application JSS Modular Design",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/dec-24-2021-flask-python-api"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Flask Python API",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/jan-10-2022-flask-api-testing"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Flask API Testing",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/feb-5-2022-function-api"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Function API Using API Gateway & Lambda",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/feb-18-2022-auth-api"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Auth API Using API Gateway & Lambda",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/mar-27-2022-mysql-client-kubernetes"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Database Client on Kubernetes",
                                "children":null
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Introduction to Redux"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Introduction to Redux",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Redux is an open-source JavaScript library based on the Flux design pattern. ",
                "children":null
            }
        ]
    },
    {
        "el":"definition",
        "attributes":{
            "word":"Flux"
        },
        "value":null,
        "children":[
            {
                "el":"p",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" Flux is a web-development design pattern and architecture which is an alternative to the MVC (Model View Controller) pattern",
                        "children":null
                    },
                    {
                        "el":"sup",
                        "attributes":null,
                        "value":"2,3",
                        "children":null
                    },
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":".  Flex maintains application state in one or many ",
                        "children":null
                    },
                    {
                        "el":"strong",
                        "attributes":null,
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"stores",
                                "children":null
                            }
                        ]
                    },
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":".  Stores are updated with ",
                        "children":null
                    },
                    {
                        "el":"strong",
                        "attributes":null,
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"actions",
                                "children":null
                            }
                        ]
                    },
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":", which contain new state data and instructions for updating a store",
                        "children":null
                    },
                    {
                        "el":"sup",
                        "attributes":null,
                        "value":"4",
                        "children":null
                    },
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":".  Actions are passed to stores via a ",
                        "children":null
                    },
                    {
                        "el":"strong",
                        "attributes":null,
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"dispatcher",
                                "children":null
                            }
                        ]
                    },
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":".  Once actions reach the store, application state is updated accordingly, and any views that use the application state are re-rendered. ",
                        "children":null
                    }
                ]
            },
            {
                "el":"p",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" Flux creates a unidirectional flow of data, beginning with an event on the UI, such as a button click. UI events trigger actions, with travel through the dispatcher to a store. Finally, the UI updates according to the new state in the store.  If you want to understand Flux in more detail, I recommend reading the official ",
                        "children":null
                    },
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://\nfacebook.github.io/flux/docs/in-depth-overview"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"In-Depth Overview",
                                "children":null
                            }
                        ]
                    },
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":". ",
                        "children":null
                    }
                ]
            }
        ]
    },
    {
        "el":"definition",
        "attributes":{
            "word":"Redux"
        },
        "value":null,
        "children":[
            {
                "el":"p",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" Redux is based on the Flux design pattern with a few key differences.  Unlike Flux, Redux consists of a single store containing an immutable state object.  Redux also does not have dispatchers.  Instead, Redux has ",
                        "children":null
                    },
                    {
                        "el":"strong",
                        "attributes":null,
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"reducers",
                                "children":null
                            }
                        ]
                    },
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":".  Reducers are functions which take an action and the existing state as arguments.  During the execution of a reducer function, a new state object is created and returned",
                        "children":null
                    },
                    {
                        "el":"sup",
                        "attributes":null,
                        "value":"5",
                        "children":null
                    },
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":". ",
                        "children":null
                    }
                ]
            },
            {
                "el":"p",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" Similar to Flux, Redux follows a unidirectional data flow.  Once again, actions are created when UI events occur. Actions pass data to the store, the state in the store is updated with the help of a reducer, and the UI is updated accordingly. ",
                        "children":null
                    }
                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Let's describe the main components of Redux in more detail.  These components include ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"actions",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"action creators",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"reducers",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", and ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"the store",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"inlineimage",
        "attributes":{
            "filename":"12-3-21-redux-components.png",
            "paddingtop":"true",
            "paddingbottom":"true"
        },
        "value":null,
        "children":[

        ]
    },
    {
        "el":"comparisontable",
        "attributes":{
            "title":"Redux Components"
        },
        "value":null,
        "children":[
            {
                "el":"comparisontableentry",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"h5",
                        "attributes":{
                            "className":"jarombek-cte-title"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":" Actions ",
                                "children":null
                            }
                        ]
                    },
                    {
                        "el":"div",
                        "attributes":{
                            "className":"jarombek-cte-body"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"p",
                                "attributes":null,
                                "value":null,
                                "children":[
                                    {
                                        "el":"#text",
                                        "attributes":null,
                                        "value":" Actions are JavaScript objects which describe how to update the application state in the Redux store.  Action objects have a ",
                                        "children":null
                                    },
                                    {
                                        "el":"code",
                                        "attributes":{
                                            "className":"jarombek-inline-code"
                                        },
                                        "value":"type",
                                        "children":null
                                    },
                                    {
                                        "el":"#text",
                                        "attributes":null,
                                        "value":" field, which is a string that identifies the action.  Actions often have additional fields with instructions on how to update the state or data to add to the state.  For example, an action to sign in a user and place their username in the application state may look like ",
                                        "children":null
                                    },
                                    {
                                        "el":"code",
                                        "attributes":{
                                            "className":"jarombek-inline-code"
                                        },
                                        "value":"{type: \"SIGN_IN\", username: \"andy\"}",
                                        "children":null
                                    },
                                    {
                                        "el":"#text",
                                        "attributes":null,
                                        "value":". ",
                                        "children":null
                                    }
                                ]
                            },
                            {
                                "el":"p",
                                "attributes":null,
                                "value":null,
                                "children":[
                                    {
                                        "el":"#text",
                                        "attributes":null,
                                        "value":" Actions are dispatched to the Redux store.  The Redux store invokes a reducer function corresponding to the action.  This reducer function returns a new application state with changes made, which are determined by the action. ",
                                        "children":null
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "el":"comparisontableentry",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"h5",
                        "attributes":{
                            "className":"jarombek-cte-title"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":" Action Creators ",
                                "children":null
                            }
                        ]
                    },
                    {
                        "el":"div",
                        "attributes":{
                            "className":"jarombek-cte-body"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"p",
                                "attributes":null,
                                "value":null,
                                "children":[
                                    {
                                        "el":"#text",
                                        "attributes":null,
                                        "value":" Action creators are functions that create Redux action objects.  They simplify the creation of actions by encapsulating the logic for building an action of a specific type within a single function.  For example, the action ",
                                        "children":null
                                    },
                                    {
                                        "el":"code",
                                        "attributes":{
                                            "className":"jarombek-inline-code"
                                        },
                                        "value":"{type: \"SIGN_IN\", username: \"andy\"}",
                                        "children":null
                                    },
                                    {
                                        "el":"#text",
                                        "attributes":null,
                                        "value":" can be built from an action creator ",
                                        "children":null
                                    },
                                    {
                                        "el":"code",
                                        "attributes":{
                                            "className":"jarombek-inline-code"
                                        },
                                        "value":"signIn()",
                                        "children":null
                                    },
                                    {
                                        "el":"#text",
                                        "attributes":null,
                                        "value":" that takes a username as an argument. ",
                                        "children":null
                                    }
                                ]
                            },
                            {
                                "el":"p",
                                "attributes":null,
                                "value":null,
                                "children":[
                                    {
                                        "el":"#text",
                                        "attributes":null,
                                        "value":" Sometimes, action creators perform more complex logic, such as performing asynchronous operations to external services and interfaces; for example, an action creator may invoke an API and create actions based on the response. ",
                                        "children":null
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "el":"comparisontableentry",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"h5",
                        "attributes":{
                            "className":"jarombek-cte-title"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":" Reducers ",
                                "children":null
                            }
                        ]
                    },
                    {
                        "el":"div",
                        "attributes":{
                            "className":"jarombek-cte-body"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"p",
                                "attributes":null,
                                "value":null,
                                "children":[
                                    {
                                        "el":"#text",
                                        "attributes":null,
                                        "value":" Reducers are functions that create new state objects.  Reducers take two arguments: an action object and an existing state object.  Reducers create a copy of the existing state object and apply changes specified in the action. The return value of a reducer is a new state object, which replaces the existing state object in the Redux store. ",
                                        "children":null
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "el":"comparisontableentry",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"h5",
                        "attributes":{
                            "className":"jarombek-cte-title"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":" Store ",
                                "children":null
                            }
                        ]
                    },
                    {
                        "el":"div",
                        "attributes":{
                            "className":"jarombek-cte-body"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"p",
                                "attributes":null,
                                "value":null,
                                "children":[
                                    {
                                        "el":"#text",
                                        "attributes":null,
                                        "value":" Redux applications contain a single store, which holds the application state.  Application state is immutable, i.e. an application state object cannot be modified.  To change the state in the store, a new state object replaces an existing state object.  New state objects are created with the help of reducer functions.  Reducer functions are called when actions are dispatched to the store. ",
                                        "children":null
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" When using Redux in a React application, the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://react-redux.js.org/tutorials/quick-start"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"React Redux",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" library is often used to simplify the configuration and usage of Redux.  I utilize React Redux in my SaintsXCTF application. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Ducks Pattern"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Ducks Pattern",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"ducks pattern",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" relates to the file layout of Redux code.  In older applications, Redux code is  often grouped into separate directories for actions, reducers, and action creators",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"6",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  With the ducks pattern, actions, reducers, and action creators exist in the same files.  However, code is logically grouped in separate files. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" For example, my SaintsXCTF application has a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/tree/master/src/\nredux/modules"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"modules",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory containing all the Redux TypeScript files following the ducks pattern.  Each file in this directory relates to a specific feature of the application.  The ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://\ngithub.com/AJarombek/saints-xctf-web/blob/master/src/redux/modules/groups.ts"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"groups.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file, for example, contains actions, reducers, and action creators that relate to group pages on the website (user's in SaintsXCTF can be members of one or many groups). ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The following code snippet is an abbreviated version of ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"groups.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":": ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"// groups.ts\n\n// Actions\nconst GET_GROUP_REQUEST = 'saints-xctf-web/groups/GET_GROUP_REQUEST';\n...\n\n// Action Types\ninterface GetGroupRequestAction {\n  type: typeof GET_GROUP_REQUEST;\n  groupId: number;\n}\n\n...\n\n// Reducers\nfunction getGroupRequestReducer(state: GroupState, action: GetGroupRequestAction): GroupState {\n  const existingGroupState = state.group[action.groupId] ?? {};\n\n  return {\n    ...state,\n    group: {\n      ...state.group,\n      [action.groupId]: {\n        ...existingGroupState,\n        isFetching: true,\n        lastUpdated: moment().unix(),\n        serverError: null\n      }\n    }\n  };\n}\n\n...\n\nexport default function reducer(state = initialState, action: GroupActionTypes): GroupState {\n  switch (action.type) {\n    case GET_GROUP_REQUEST:\n      return getGroupRequestReducer(state, action);\n    ...\n    default:\n      return state;\n  }\n}\n\n// Action Creators\nexport function getGroupRequest(groupId: number): GetGroupRequestAction {\n  return {\n    type: GET_GROUP_REQUEST,\n    groupId\n  };\n}\n\n...\n",
        "children":null
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Redux Application Setup"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Redux Application Setup",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Redux is configured within the React application using the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://react-redux.js.org/tutorials/quick-start"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" React Redux",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" library.  Both ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"react-redux",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@types/react-redux",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" are specified as application dependencies in the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/master/package.json"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"package.json",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file.  The configuration of Redux begins in the entrypoint of the React application, ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-web/blob/master/src/index.tsx#L35-L48"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"index.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  A simplified version of the code is shown below. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"import React from 'react';\nimport { render } from 'react-dom';\nimport configureStore from './redux/store';\nimport { Provider } from 'react-redux';\n\nconst store = configureStore();\n\nconst RoutedApp = (): JSX.Element => {\n  return (\n    <Provider store={store}>\n        <App />\n    </Provider>\n  );\n};\n\nrender(<RoutedApp />, document.getElementById('react-container'));\n\nexport default RoutedApp;\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" I removed all the details unrelated to Redux from this code, with the complete version available on ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/master/src/index.tsx"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"GitHub",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The React Redux library supplies a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"<Provider />",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" component, which makes the Redux store available to all components in the application",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"7",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  As you will see later on, the Redux store is accessible via React hooks. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"<Provider />",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is used at the top level of the application, right after bootstrapping React onto the DOM with the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"render()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" method call. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"<Provider />",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" takes a required prop ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"store",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which is the Redux store for the application.  In my case, the Redux store is created with the line ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"const store = configureStore()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"configureStore()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a custom function, which is shown below. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"import { createBrowserHistory } from 'history';\nimport { createStore, applyMiddleware, Store } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport reducer from './modules/reducers';\n\nexport const history = createBrowserHistory();\n\nexport default function configureStore(): Store {\n  const loggerMiddleware = createLogger();\n  const middleware = [routerMiddleware(history), loggerMiddleware, thunkMiddleware];\n\n  const createStoreWithMiddleware = applyMiddleware(...middleware)(createStore);\n  const store = createStoreWithMiddleware(reducer(history));\n\n  return store;\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The code above is a simplified version of a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/\nmaster/src/redux/store.ts"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"store.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file in my application.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"configureStore()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a function that returns a Redux store of type ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Store",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  You will often see variants of the code above in Redux tutorials.  Let's walk through this code line by line. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"const loggerMiddleware = createLogger()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" creates a logging middleware for Redux using the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"redux-logger",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" library.  Redux middleware is a means for adding third party extensions to Redux.  Third party libraries are invoked after actions are dispatched to the store, but before the store invokes a reducer function",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"8",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"redux-logger",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" provides middleware for logging actions to the console output of a web browser.  This is very helpful for debugging. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"loggerMiddleware",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is utilized in the line ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"const middleware = [routerMiddleware(history), loggerMiddleware, thunkMiddleware]",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"middleware",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a list of Redux middlewares used in my application.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"routerMiddleware",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a React Router middleware and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"thunkMiddleware",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a middleware for writing asynchronous code that interacts with the Redux store (for example, dispatching an action based on the result of an API request)",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"9",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"const createStoreWithMiddleware = applyMiddleware(...middleware)(createStore)",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a complicated looking piece of code.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"applyMiddleware",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a higher order function (a function that returns another function).  It takes my list of Redux middlewares as an argument. The result of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"applyMiddleware",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a function that takes ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"createStore",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" as an argument.  The result is ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"createStoreWithMiddleware",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which itself is a function. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"createStoreWithMiddleware()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is used to create a Redux store with our list of middlewares applied.  The line ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"createStoreWithMiddleware(reducer(history))",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" accomplishes this task.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"reducer()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a function that creates all the Redux reducers for my application.  It also takes a browser history object as an argument (",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"history",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":") for use with the React Router middleware. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The following code shows the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"reducer()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function (named here as ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"createRootReducer",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":").  It exists in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-web/blob/master/src/redux/modules/reducers.ts"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"reducers.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file in my repository. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"import { combineReducers, Reducer } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nimport auth from './auth';\nimport registration from './registration';\nimport logs from './logs';\nimport memberships from './memberships';\nimport notifications from './notifications';\nimport profile from './profile';\nimport rangeView from './rangeView';\nimport teams from './teams';\nimport groups from './groups';\nimport { History } from 'history';\n\nconst createRootReducer = (history: History): Reducer =>\n  combineReducers({\n    router: connectRouter(history),\n    auth,\n    registration,\n    logs,\n    memberships,\n    notifications,\n    profile,\n    rangeView,\n    teams,\n    groups\n  });\n\nexport default createRootReducer;\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"createRootReducer()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a function that creates a reducing function for the Redux store",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"10",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  In other words, it creates the Redux reducer for my application. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"createRootReducer()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" returns the result of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"combineReducers()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which is a utility function built-in to Redux. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"combineReducers()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" takes an object of reducer functions as an argument. It merges these reducers and returns a single reducer function that can be used by the Redux store.  With the help of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"combineReducers()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", reducers can be split across multiple files, allowing engineers to follow the Ducks pattern.  As you can see, I have separate reducer functions for different application features (",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/master/src/redux/modules/auth.ts#L506-L551"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"auth",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/master/src/redux/modules/registration.ts#L218-L243"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"registration",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/master/src/redux/modules/logs.ts#L660-L709"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"logs",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", etc.). Each of these files is referred to as a Redux Ducks module",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"11",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Redux Ducks Modules"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Redux Ducks Modules",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Each Redux Ducks module is a JavaScript or TypeScript file containing Redux actions, action creators, and a reducer. When using TypeScript, a module can also contain type definitions for actions. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" For example, in my React/TypeScript application, one of my Redux Ducks modules is ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-web/blob/master/src/redux/modules/teams.ts"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"teams.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".   ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"teams.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" contains Redux logic for a single feature of my website - teams that users can be members of.  My Redux Ducks modules are logically split into five sections: actions, action types, reducers, action creators, and redux thunk functions. ",
                "children":null
            }
        ]
    },
    {
        "el":"subtitle",
        "attributes":{
            "title":"Actions"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Actions",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" In Redux, actions have a type property, which is a unique identifier for the action.  The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"type",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" property is a string; all the type strings used in a module are defined at the top of the module.  For example, these are the type strings defined in my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-web/blob/master/src/redux/modules/teams.ts#L15-L23"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"teams.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" module. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"const GET_TEAM_REQUEST = 'saints-xctf-web/teams/GET_TEAM_REQUEST';\nconst GET_TEAM_SUCCESS = 'saints-xctf-web/teams/GET_TEAM_SUCCESS';\nconst GET_TEAM_FAILURE = 'saints-xctf-web/teams/GET_TEAM_FAILURE';\nconst GET_TEAM_GROUPS_REQUEST = 'saints-xctf-web/teams/GET_TEAM_GROUPS_REQUEST';\nconst GET_TEAM_GROUPS_SUCCESS = 'saints-xctf-web/teams/GET_TEAM_GROUPS_SUCCESS';\nconst GET_TEAM_GROUPS_FAILURE = 'saints-xctf-web/teams/GET_TEAM_GROUPS_FAILURE';\nconst SEARCH_TEAMS_REQUEST = 'saints-xctf-web/teams/SEARCH_TEAMS_REQUEST';\nconst SEARCH_TEAMS_SUCCESS = 'saints-xctf-web/teams/SEARCH_TEAMS_SUCCESS';\nconst SEARCH_TEAMS_FAILURE = 'saints-xctf-web/teams/SEARCH_TEAMS_FAILURE';\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" All actions follow the naming convention ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"'application-name/module-name/ACTION_NAME'",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". While Redux does not mandate this convention, I find it elegant and effective in removing the risk of naming conflicts between actions in different modules. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Action type strings are used by action creators and reducers.  Action creators use action type strings when building an action object.  Reducers use action type strings to determine which reducer function to invoke based on the action dispatched to the Redux store. ",
                "children":null
            }
        ]
    },
    {
        "el":"subtitle",
        "attributes":{
            "title":"Action Types"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Action Types",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Action types are used by TypeScript to ensure that action objects are well-typed.  In other words, an action type defines an interface for an action, containing all the properties in an action and their corresponding types.  The following code shows all the action types defined in my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/\nmaster/src/redux/modules/teams.ts#L25-L87"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"teams.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" module. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"interface GetTeamRequestAction {\n  type: typeof GET_TEAM_REQUEST;\n  teamName: string;\n}\n\ninterface GetTeamSuccessAction {\n  type: typeof GET_TEAM_SUCCESS;\n  team: Team;\n  teamName: string;\n}\n\ninterface GetTeamFailureAction {\n  type: typeof GET_TEAM_FAILURE;\n  serverError: string;\n  teamName: string;\n}\n\ninterface GetTeamGroupsRequestAction {\n  type: typeof GET_TEAM_GROUPS_REQUEST;\n  teamName: string;\n}\n\ninterface GetTeamGroupsSuccessAction {\n  type: typeof GET_TEAM_GROUPS_SUCCESS;\n  groups: Group[];\n  teamName: string;\n}\n\ninterface GetTeamGroupsFailureAction {\n  type: typeof GET_TEAM_GROUPS_FAILURE;\n  serverError: string;\n  teamName: string;\n}\n\ninterface SearchTeamsRequestAction {\n  type: typeof SEARCH_TEAMS_REQUEST;\n  text: string;\n}\n\ninterface SearchTeamsSuccessAction {\n  type: typeof SEARCH_TEAMS_SUCCESS;\n  teams: Team[];\n  text: string;\n}\n\ninterface SearchTeamsFailureAction {\n  type: typeof SEARCH_TEAMS_FAILURE;\n  serverError: string;\n  text: string;\n}\n\ntype TeamActionTypes =\n  | GetTeamRequestAction\n  | GetTeamSuccessAction\n  | GetTeamFailureAction\n  | GetTeamGroupsRequestAction\n  | GetTeamGroupsSuccessAction\n  | GetTeamGroupsFailureAction\n  | SearchTeamsRequestAction\n  | SearchTeamsSuccessAction\n  | SearchTeamsFailureAction;\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Each action has a corresponding ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"interface",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", containing a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"type",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" property and zero to many additional properties.  For example, type ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"GetTeamSuccessAction",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" has a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"type",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" property along with ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"team",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"teamName",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" properties.  All these types are unioned together into a single ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TeamActionTypes",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" type. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Action types are used extensively when defining reducers and action creators. ",
                "children":null
            }
        ]
    },
    {
        "el":"subtitle",
        "attributes":{
            "title":"Reducers"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Reducers",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" In each module, there is a root reducer and one or many reducer functions.  The root reducer decides which reducer function to invoke based on the type of an action dispatched to the Redux store.  The following code shows the root reducer for my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/master/src/redux/modules/\nteams.ts#L244-L267"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"teams.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" module. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"export default function reducer(state = initialState, action: TeamActionTypes): TeamState {\n  switch (action.type) {\n    case GET_TEAM_REQUEST:\n      return getTeamRequestReducer(state, action);\n    case GET_TEAM_SUCCESS:\n      return getTeamSuccessReducer(state, action);\n    case GET_TEAM_FAILURE:\n      return getTeamFailureReducer(state, action);\n    case GET_TEAM_GROUPS_REQUEST:\n      return getTeamGroupsRequestReducer(state, action);\n    case GET_TEAM_GROUPS_SUCCESS:\n      return getTeamGroupsSuccessReducer(state, action);\n    case GET_TEAM_GROUPS_FAILURE:\n      return getTeamGroupsFailureReducer(state, action);\n    case SEARCH_TEAMS_REQUEST:\n      return getSearchTeamsRequestReducer(state, action);\n    case SEARCH_TEAMS_SUCCESS:\n      return getSearchTeamsSuccessReducer(state, action);\n    case SEARCH_TEAMS_FAILURE:\n      return getSearchTeamsFailureReducer(state, action);\n    default:\n      return state;\n  }\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The root reducer is written as the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"reducer()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"reducer()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is the main export of the Redux Ducks module. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"reducer()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" takes two arguments: ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"state",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"action",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"state",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" holds the existing state of the Redux store, and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"action",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" holds an action object that was dispatched to the store.  The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"type",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" property of the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"action",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" object determines which reducer function to invoke from the root reducer. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"action.type",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is used in the switch statement to select a reducer function. For example, if an action ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"{type: \"GET_TEAM_REQUEST\", teamName: \"saintsxctf\"}",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is dispatched to the Redux store and the reducer is invoked, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"getTeamRequestReducer(state, action)",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" will be called.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"getTeamRequestReducer()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" has the following implementation: ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"function getTeamRequestReducer(state: TeamState, action: GetTeamRequestAction): TeamState {\n  const existingTeamState = state.team[action.teamName] ?? {};\n\n  return {\n    ...state,\n    team: {\n      ...state.team,\n      [action.teamName]: {\n        ...existingTeamState,\n        isFetching: true,\n        lastUpdated: moment().unix(),\n        serverError: null\n      }\n    }\n  };\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" This reducer function creates a new state object using the existing ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"state",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and the JavaScript spread (",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"...",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":") notation.  Based on the contents of the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"action",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" object argument, a field ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"team[action.teamName]",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is added to the application state. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" If the existing state was: ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JavaScript"
        },
        "value":"{\n  team: {},\n  search: {}\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The new state after a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"{type: \"GET_TEAM_REQUEST\", teamName: \"saintsxctf\"}",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" action is dispatched may look like: ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JavaScript"
        },
        "value":"{\n  team: {\n    saintsxctf: {\n      isFetching: true,\n      lastUpdated: 1638565750,\n      serverError: null\n    }\n  },\n  search: {}\n}\n",
        "children":null
    },
    {
        "el":"subtitle",
        "attributes":{
            "title":"Action Creators"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Action Creators",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Every action type has a corresponding action creator, which is a function that creates an action object.  The following code shows some of the action creators available in my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/\nmaster/src/redux/modules/teams.ts#L269-L337"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"teams.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" module. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"export function getTeamRequest(teamName: string): GetTeamRequestAction {\n  return {\n    type: GET_TEAM_REQUEST,\n    teamName\n  };\n}\n\nexport function getTeamSuccess(team: Team, teamName: string): GetTeamSuccessAction {\n  return {\n    type: GET_TEAM_SUCCESS,\n    team,\n    teamName\n  };\n}\n\nexport function getTeamFailure(serverError: string, teamName: string): GetTeamFailureAction {\n  return {\n    type: GET_TEAM_FAILURE,\n    serverError,\n    teamName\n  };\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Basically, action creators parameterize actions.  Return values of action creators are often dispatched directly to the Redux store.  Other times, they are dispatched as part of Redux Thunk functions. ",
                "children":null
            }
        ]
    },
    {
        "el":"subtitle",
        "attributes":{
            "title":"Redux Thunk Functions"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Redux Thunk Functions",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Redux Thunk functions are created using the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/reduxjs/redux-thunk"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"redux-thunk",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" library.  Redux thunk functions are action creators, except they return a function instead of an action",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"12",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  These functions  run asynchronous code and dispatch actions to the Redux store depending on certain conditions.  The main use of ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"redux-thunk",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" in my application is to make API calls and dispatch actions depending on API responses. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" For example, the following Redux Thunk function makes a call to my API, retrieving a team with a specific name.  It exists in my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/master/src/redux/modules/teams.ts#L339-L357"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" teams.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" module. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"export function getTeam(teamName: string): AppThunk<Promise<void>, TeamState> {\n  return async function (dispatch: Dispatch): Promise<void> {\n    dispatch(getTeamRequest(teamName));\n\n    try {\n      const response = await api.get(`teams/${teamName}`);\n      const { team } = response.data;\n\n      dispatch(getTeamSuccess(team, teamName));\n    } catch (error) {\n      const { response } = error as AxiosError;\n      const serverError = response?.data?.error ?? 'An unexpected error occurred.';\n\n      if (response?.status !== 403) {\n        dispatch(getTeamFailure(serverError, teamName));\n      }\n    }\n  };\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"getTeam()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a Redux Thunk function that returns an ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"async",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function.  This function takes a single argument called ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"dispatch",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which is a Redux function that dispatches actions to the store.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"dispatch",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is used three times.  The first, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"dispatch(getTeamRequest(teamName))",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", dispatches an action indicating that  an API request is about to be made.  This is useful for implementing loading icons or loading screens.  Inside the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"try… catch",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" block, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"await api.get(`teams/${teamName}`)",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" makes the actual API call.  The second dispatch, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"dispatch(getTeamSuccess(team, teamName))",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", dispatches an action when the API call is successful.  The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"team",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" variable comes from the API response body.  The third dispatch, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"dispatch(getTeamFailure(serverError, teamName))",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" dispatches an action when the API call returns an error. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" If you look at the Redux Thunk functions in my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/master/\nsrc/redux/modules/teams.ts#L339-L397"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"teams.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" module or throughout my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-web/tree/master/src/redux/modules"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"entire application",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", you will notice that most follow this same pattern. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"React Redux State Management Code"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"React Redux State Management Code",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" When working with Redux in a React application, the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"react-redux",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" library provides React hooks for dispatching actions to the Redux store and reading application state from the Redux store.  These React hooks are ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"useDispatch()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"useSelector()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", respectively. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Continuing with the example of teams in my application, let's look at the page which displays all the teams that a user is a member of. ",
                "children":null
            }
        ]
    },
    {
        "el":"inlineimage",
        "attributes":{
            "filename":"12-3-21-teams-page.png",
            "paddingtop":"true",
            "paddingbottom":"true"
        },
        "value":null,
        "children":[

        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The following code is for a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TeamsBody",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" component, which represents the page shown above.  The code below is shortened for readability, with the full code available in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/master/src/components/teams/TeamsBody/TeamsBody.tsx"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" TeamsBody.tsx",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file in my repository. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"import React, { useEffect, useState } from 'react';\nimport { GroupMeta, Memberships, RootState, TeamMembership, User, Users } from '../../../redux/types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserMemberships } from '../../../redux/modules/profile';\nimport { getTeamGroups } from '../../../redux/modules/teams';\nimport { useNavigate } from 'react-router-dom';\n\ninterface Props {\n  user: User;\n}\n\nconst TeamsBody: React.FunctionComponent<Props> = ({ user }) => {\n  const navigate = useNavigate();\n\n  const dispatch = useDispatch();\n  const userProfiles: Users = useSelector((state: RootState) => state.profile.users);\n  const teams = useSelector((state: RootState) => state.teams.team);\n\n  const [memberships, setMemberships] = useState<TeamMembership[]>(null);\n\n  useEffect(() => {\n    if (userProfiles && user?.username && !userProfiles[user.username]?.memberships) {\n      dispatch(getUserMemberships(user.username));\n    }\n  }, [dispatch, user.username, userProfiles]);\n\n  useEffect(() => {\n    if (userProfiles && user.username) {\n      const membershipDetails: Memberships = userProfiles[user.username]?.memberships ?? {};\n      setMemberships(membershipDetails.teams?.filter((team) => team.status === 'accepted'));\n    }\n  }, [userProfiles, user.username]);\n\n  useEffect(() => {\n    if (memberships) {\n      memberships.forEach((membership: TeamMembership) => {\n        dispatch(getTeamGroups(membership.team_name));\n      });\n    }\n  }, [memberships, dispatch]);\n\n  return (\n    <div>\n      <h3>Select a group.</h3>\n      <div>\n        {memberships?.map((membership) => (\n          <div key={membership.team_name} data-cypress=\"teamItem\">\n            <h4>{membership.title}</h4>\n            <div>\n              {teams[membership.team_name]?.groups?.items?.map((group: GroupMeta) => (\n                <div data-cypress=\"groupItem\" onClick={(): void => navigate(`/group/${group.id}`)}>\n                  <p>{group.group_title}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TeamsBody;\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" First, notice that ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"useDispatch()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"useSelector()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" are imported from ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"react-redux",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"useDistpatch()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is invoked to get a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"dispatch",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function, with the line ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"const dispatch = useDispatch()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  On the next two lines, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"useSelector",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is used to retrieve data from the Redux store; specifically, user profiles and teams are retrieved, saved in ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"userProfiles",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"teams",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" variables, respectively. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"dispatch",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is invoked within ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"useEffect()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" React hooks.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"useEffect()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is beyond the scope of this article; however, in general terms, this setup dispatches the results of action creators and Redux Thunk functions to the Redux store when the webpage loads or React props/state change.  These Redux Thunk functions make the API calls that supply data for the front-end application.  For example, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"dispatch(getUserMemberships(user.username))",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" gets all the team memberships from the API for the signed in user. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The return statement is the JSX for the React  component, which is translated into HTML when displayed on a web browser. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Conclusions"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Conclusions",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Redux is a great way to store complex front-end application state.  It integrates seamlessly with React and TypeScript. While I don't recommend its use for basic applications, any time a website requires shared state across pages or persisted sign in data, I recommend giving Redux a try.  All the front-end code for my SaintsXCTF application, which uses Redux,  is available on ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"GitHub",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    }
];

preview = content.slice(1, 3);

postName = "dec-3-2021-redux-react";
postDate = new Date('2021-12-03T12:00:00');
existingPost = db.posts.findOne({name: postName});

postViews = (existingPost) ? existingPost.views : 0;

db.posts.remove({name: postName});
db.posts_content.remove({name: postName});

db.posts.insertOne({
    name: postName,
    title: "Redux in a TypeScript React Application: Following the Ducks Pattern",
    description: ``,
    date: postDate,
    type: "Retrospective",
    views: postViews,
    tags: [
        {
            name: "Redux",
            picture: "https://asset.jarombek.com/logos/redux.png",
            color: "redux"
        },
        {
            name: "React",
            picture: "https://asset.jarombek.com/logos/react.png",
            color: "react"
        },
        {
            name: "TypeScript",
            picture: "https://asset.jarombek.com/logos/ts.png",
            color: "typescript"
        },
        {
            name: "JavaScript",
            picture: "https://asset.jarombek.com/logos/js.png",
            color: "javascript"
        },
        {
            name: "Flux",
            picture: "https://asset.jarombek.com/logos/flux.png",
            color: "flux"
        }
    ],
    preview,
    previewString: JSON.stringify(preview),
    sources: [
        {
            startName: "\"When should I use Redux?\", ",
            endName: "",
            linkName: "https://redux.js.org/faq/general#when-should-i-use-redux",
            link: "https://redux.js.org/faq/general#when-should-i-use-redux"
        },
        {
            startName: "Alex Banks & Eve Porcello, ",
            endName: " (Sebastopol, CA: O'Reilly, 2017), 174",
            linkName: "Learning React",
            link: "http://shop.oreilly.com/product/0636920049579.do"
        },
        {
            startName: "\"Flux: In-Depth Overview\", ",
            endName: "",
            linkName: "https://facebook.github.io/flux/docs/in-depth-overview",
            link: "https://facebook.github.io/flux/docs/in-depth-overview"
        },
        {
            startName: "",
            endName: ", 175",
            linkName: "Banks.",
            link: "http://shop.oreilly.com/product/0636920049579.do"
        },
        {
            startName: "",
            endName: ", 190",
            linkName: "Banks.",
            link: "http://shop.oreilly.com/product/0636920049579.do"
        },
        {
            startName: "\"Structure Files as Feature Folders with Single-File Logic\", ",
            endName: "",
            linkName: "https://redux.js.org/style-guide/style-guide#structure-files-as-feature-folders-with-single-file-logic",
            link: "https://redux.js.org/style-guide/style-guide#structure-files-as-feature-folders-with-single-file-logic"
        },
        {
            startName: "\"Usage with TypeScript\", ",
            endName: "",
            linkName: "https://react-redux.js.org/using-react-redux/usage-with-typescript#provider",
            link: "https://react-redux.js.org/using-react-redux/usage-with-typescript#provider"
        },
        {
            startName: "\"Redux Fundamentals, Part 4: Store - Middleware\", ",
            endName: "",
            linkName: "https://redux.js.org/tutorials/fundamentals/part-4-store#middleware",
            link: "https://redux.js.org/tutorials/fundamentals/part-4-store#middleware"
        },
        {
            startName: "\"Redux Thunk: Why Do I Need This?\", ",
            endName: "",
            linkName: "https://github.com/reduxjs/redux-thunk#why-do-i-need-this",
            link: "https://github.com/reduxjs/redux-thunk#why-do-i-need-this"
        },
        {
            startName: "\"combineReducers(reducers)\", ",
            endName: "",
            linkName: "https://redux.js.org/api/combinereducers",
            link: "https://redux.js.org/api/combinereducers"
        },
        {
            startName: "\"Ducks: Redux Reducer Bundles - Rules\", ",
            endName: "",
            linkName: "https://github.com/erikras/ducks-modular-redux#rules",
            link: "https://github.com/erikras/ducks-modular-redux#rules"
        },
        {
            startName: "\"Redux Thunk: Motivation\", ",
            endName: "",
            linkName: "https://github.com/reduxjs/redux-thunk#motivation",
            link: "https://github.com/reduxjs/redux-thunk#motivation"
        }
    ]
});

db.posts_content.insertOne({
    name: postName,
    date: postDate,
    content,
    contentString: JSON.stringify(content)
});
