/**
 * Script for the MongoDB Shell.
 * @author Andrew Jarombek
 * @since 8/11/2021
 */

connection = new Mongo();
db = connection.getDB("jarombekcom");

content = [
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Cypress is an end to end (e2e) testing framework written in JavaScript for front-end applications.  Cypress tests run in a Chrome web browser or a headless browser, navigating through and interacting with web pages.  It's reasonable to compare Cypress to other test automation frameworks such as Selenium or Puppeteer; however, unlike those frameworks, Cypress was created specifically for writing end to end tests.  Because of its test first design, Cypress provides lots of features that make writing end to end tests easy.  It is currently my preferred end to end testing tool. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" While Cypress tests can be written in JavaScript, as is the case with my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\njarombek-com/tree/v2.0.4/cypress/integration"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"jarombek.com",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" application, Cypress also has TypeScript support.  Nowadays, I write most of my front-end applications in TypeScript due to its type safety.  In my experience, TypeScript helps reduce the number of bugs and type mismatch mistakes in JavaScript code.  For applications written in TypeScript, it is great to be able to write Cypress tests in TypeScript as well.  This helps keep the programming language uniform across the front-end application code and test code. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" In this article, I discuss the basics of Cypress and how I use it to test my front-end applications.  All the Cypress  code I show is written in TypeScript.  The Cypress test code comes from two of my application repositories: ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/apollo-client-server-prototype/tree/master/client/cypress"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"apollo-client-server-prototype",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/tree/v2.0.4/cypress"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saints-xctf-web",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"What is End to End Testing"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"What is End to End Testing?",
                "children":null
            }
        ]
    },
    {
        "el":"definition",
        "attributes":{
            "word":"End to End Testing"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" End to end (E2E) testing is the practice of writing tests for an application from one end to another, from beginning to end.  In essence, these tests cover the entire execution flow of an application in a production-like environment.  In the case of a front-end application, this means testing the application by interacting with the UI as an actual user would. Because these tests are executed in a production-like environment, all the API calls used by the front-end code are invoked as part of the tests.  This results in the application being executed from end to end - from the front-end to the back-end and database. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" With Cypress, end to end tests are run in a web browser.  Tests navigate to a web page and make assertions about the content shown.  Then, they can interact with the page and make further assertions about what changed in the UI, check what network calls were made, and more. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Cypress Basics"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Cypress Basics",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Cypress is installed using its ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://www.npmjs.com/package/cypress"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"cypress",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" npm package.  Cypress is pretty easy to configure within an application.  For example, my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://saintsxctf.com"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saintsxctf.com",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" application uses Cypress and is configured to use it with TypeScript.  For starters, its repository ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saints-xctf-web",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is written as an npm package, with ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cypress",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" defined as a dev dependency in its ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-web/blob/v2.0.4/package.json#L77"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"package.json",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file.  Next, a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-web/blob/v2.0.4/cypress.json"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"cypress.json",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file exists in the root directory of the npm package.  This is the main configuration file for Cypress, with the contents of my configuration file shown below. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JSON"
        },
        "value":"{\n  \"baseUrl\": \"http://localhost:8090\",\n  \"ignoreTestFiles\": [\"*.md\"],\n  \"env\": {\n    ...\n  }\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Although the fields of the configuration file are optional, they do help simplify tests and configure the settings of Cypress to fit your needs",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"1",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  In my configuration file, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"baseUrl",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" configures the default base URL to use for all my tests, so that I don't need to copy-paste it across all my test cases. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ignoreTestFiles",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" configures the Cypress test runner to ignore any Markdown files in the test directory, in my case which are used for documentation purposes.  Finally, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"env",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" sets environment variables which are accessible to the Cypress test code.  Cypress has many additional ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://docs.cypress.io/guides/references/configuration#Options"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" configuration options",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" listed in their documentation. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The actual Cypress test code is written in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/tree/v2.0.4/cypress"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"cypress",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory located in the root of the npm package.  The ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"cypress",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" folder and its subdirectories are created as a scaffold automatically when Cypress first runs in the project, so there is no need to create these manually.  Inside ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"cypress",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" are four subdirectories - ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"fixtures",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"integration",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"plugins",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", and ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"support",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" - along with a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-web/blob/v2.0.4/cypress/tsconfig.json"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"tsconfig.json",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file to configure TypeScript. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/8-11-21-cypress-directory.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"integration",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory holds the Cypress end to end tests.  In my case, these tests are TypeScript files with ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":".e2e.test.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file extensions.  For example, the Cypress tests for the home page of my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://saintsxctf.com"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saintsxctf.com",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" website are located in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-web/blob/v2.0.4/cypress/integration/Home.e2e.test.ts"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Home.e2e.test.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"fixtures",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory contains static assets used by the tests.  The majority of the files in my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/v2.0.4/cypress/fixtures"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"fixtures",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory are JSON files representing mocked API responses.  In certain end to end tests, it's preferable to use fixed API responses instead of ones from an actual live API.  This is often due to the unpredictability of API data, and a need to test specific repeatable scenarios.  It's also due to the requirement of testing failure scenarios on the website, such as when an API returns an unexpected error code.  These scenarios are easily achieved by mocking the API responses with the JSON files found in the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"fixtures",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory.  The other static assets found in my ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"fixtures",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory are pictures, which are used for testing profile picture and group picture uploading on my website. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"plugins",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory contains a single ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/\nv2.0.4/cypress/plugins/index.js"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"index.js",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" JavaScript file that runs in Node.js before the Cypress tests begin",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"2",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  This file is used to configure first-party and third-party tooling which extends the functionality of Cypress.  For example, my plugins file configures a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://docs.cypress.io/guides/tooling/\ncode-coverage#E2E-code-coverage"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"code coverage plugin",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" to generate code coverage reports for my end to end tests",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"3",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  Code coverage reports require an additional ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@cypress/code-coverage",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" dev dependency in the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/v2.0.4/package.json#L51"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"package.json",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"support",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory contains custom commands used throughout Cypress tests.  Custom commands contain reusable code, making the Cypress tests more concise and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog/\njun-17-2019-terraform-module#dry-principal"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"DRY",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/\nv2.0.4/cypress/support/index.ts"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"index.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file in the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"support",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory is run automatically before  every Cypress test file, so that the custom commands don't need to be manually imported into all the test  files",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"4",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  There is a whole section of this article dedicated to writing custom commands in Cypress. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/v2.0.4/cypress/tsconfig.json"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"tsconfig.json",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file in the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"cypress",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" folder creates and configures a TypeScript project for the Cypress tests, separate from the TypeScript project for the source code.  The most important property of the JSON configuration is ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"compilerOptions.types",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", specifying that only type definitions specific to Cypress should be used in the test code",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"5",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JSON"
        },
        "value":"{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"baseUrl\": \"../node_modules\",\n    \"target\": \"ES5\",\n    \"lib\": [\"ES5\", \"DOM\"],\n    \"types\": [\"cypress\", \"cypress-file-upload\"]\n  },\n  \"include\": [\"**/*.ts\"]\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" There are two main ways to run Cypress tests: in a web browser and in a headless browser.  Inside my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-web/blob/v2.0.4/package.json#L120-L122"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"package.json",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file, I specify multiple custom commands for running Cypress tests.  The first command, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cypress open",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" (aliased as ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy:open",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"), opens the Cypress test runner and allows test files  to be run in a web browser.  The test runner is shown below. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/8-11-21-cypress-test-runner.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The test runner lists all the end to end test files, referred to as ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"specs",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which exist in the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"integration",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory.  Clicking any of the file names opens a web browser and begins running the tests. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/8-11-21-cypress-browser.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" In the screenshot above, all three tests passed.  While the tests run, the Cypress commands that execute are displayed on the left hand side of the browser.  On the right hand side, the current state of the website in the test is shown. This is great for seeing tests execute on the UI, and allows for easy debugging if tests are failing. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/8-11-21-cypress-executed-test.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The other way to run tests is with a headless browser.  Headless browsers provide an execution environment similar to a web browser, except they run from a command line",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"6",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  Executing Cypress tests in headless browsers is great for CI/CD pipelines which run tests in an automated fashion.  The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cypress run --headless",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" command (aliased as ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy:headless",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":") runs all the Cypress tests in a headless browser. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" In the remainder of this article, I walk you through Cypress test cases and reusable Cypress functions.  All these examples are used in the end to end tests for my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://saintsxctf.com"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saintsxctf.com",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" website. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Cypress Test Examples"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Cypress Test Examples",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Let's start with some basic examples which test the SaintsXCTF home page. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/8-11-21-saintsxctf-home-page.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Cypress test code is built on top of the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://mochajs.org/"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Mocha testing framework",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://www.chaijs.com/"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Chai assertion library",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  Therefore, engineers familiar with these libraries will recognize the coding syntax right away.  Cypress test specs often have a similar layout to the following specification for my website's home page. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"describe('Home E2E Tests', () => {\n  beforeEach(() => {\n    cy.visit('/');\n  });\n\n  it('loads the home page as expected', () => {\n    cy.get('.sxctf-home').contains('Cross Country and Track & Field Team Exercise Logs').should('exist');\n  });\n\n  ...\n});\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The home page's end to end test spec is located in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/v2.0.4/\ncypress/integration/Home.e2e.test.ts"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Home.e2e.test.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file.  The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"describe()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function gives a name to the test suite with its first argument and defines all the test cases along with pre-test and post-test hook methods with its second argument.  In my example, the test suite is named \"Home E2E Tests\". ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"beforeEach()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a pre-test hook which executes before every test case. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"beforeEach()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" executes one built-in Cypress command, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy.visit('/');",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which navigates the browser to the home page of my website before each test. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The final piece of code in the snippet above is an ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"it()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function, which  defines a test case.  The test is given the name \"loads the home page as expected\" and executes a few Cypress commands.   Most Cypress tests utilize function chaining, and this basic example is no different.  First, the call to  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy.get('.sxctf-home')",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" gets any HTML elements with the class  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"sxctf-home",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The result could be zero, one, or many HTML elements.  Next,  the result of this function is chained with ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":".contains('Cross Country and Track & Field Team Exercise Logs')",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"contains()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function narrows down the HTML elements retrieved with the  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy.get()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" call to only those elements that contain the text \"Cross Country and Track & Field Team Exercise Logs\".   Finally, the result of this function is chained with ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":".should('exist')",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".   This ensures that at least one HTML element exists with a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"sxctf-home",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" class  and the text \"Cross Country and Track & Field Team Exercise Logs\".  If no elements match these two requirements, the Cypress test fails. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/8-11-21-saintsxctf-home-title-test.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Let's look at a few more basic tests used on my application's home page. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"it(\"'about' header button navigates down to the 'about' section\", () => {\n  cy.get('.aboutButton').click();\n  cy.url().should('include', '/#about');\n});\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" This test takes an action, clicking on an HTML element with an ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"aboutButton",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" class.  The test then asserts that the URL of the webpage has changed to ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"/#about",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", signaling that the user was navigated down the page to the \"About\" section. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/8-11-21-saintsxctf-home-about-test.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The website under test is mobile-responsive, and I have a separate file for mobile end to end tests called ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/v2.0.4/cypress/integration/Home.mobile.e2e.test.ts"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" Home.mobile.e2e.test.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"describe('Home Mobile E2E Tests', () => {\n  beforeEach(() => {\n    cy.viewport(400, 800);\n    cy.visit('/');\n  });\n\n  it(\"'About' navbar dropdown link navigates down to the 'About' section\", () => {\n    cy.url().should('equal', `${Cypress.config('baseUrl')}/`);\n    cy.get('.sxctf-nav-hamburger').click();\n    cy.get('.aj-nav-list-item').contains('About').click();\n    cy.url().should('equal', `${Cypress.config('baseUrl')}/#about`);\n  });\n\n  ...\n});\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The mobile home page test suite has a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"beforeEach()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" hook function similar to the one in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/v2.0.4/cypress/integration/Home.e2e.test.ts"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" Home.e2e.test.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", except this time it also changes the viewport to a mobile phone screen size.  This is achieved with the Cypress command ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy.viewport(400, 800)",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" which changes the viewport width to 400px and the viewport height to 800px. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The test shown in this code snippet is logically equivalent to the \"About\" section test discussed prior.  This time, a mobile dropdown is clicked to navigate to the \"About\" section instead of a button in the website header. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/8-11-21-saintsxctf-home-about-mobile-test.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Advanced Cypress Test Examples"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Advanced Cypress Test Examples",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Now let's look at some of the advanced Cypress tests written in my end to end test suite.  Don't worry too much about the tiny code details; instead, focus on the big picture of what Cypress is capable of. ",
                "children":null
            }
        ]
    },
    {
        "el":"subtitle",
        "attributes":{
            "title":"Create New Exercise Log"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Create New Exercise Log",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Let's look at a test that creates a new exercise log.  This test exists in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-web/blob/v2.0.4/cypress/integration/NewLog.e2e.test.ts#L69-L109"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"NewLog.e2e.test.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"it('able to create a new running exercise log', () => {\n  cy.route('POST', '/api/v2/logs/').as('createLog');\n\n  const formattedDate = moment().format('YYYY-MM-DD');\n  const finalFormattedDate = moment().format('MMM. Do, YYYY');\n\n  cy.visit('/log/new');\n  cy.get('.sxctf-image-input input[name=\"name\"]').type('Test Run');\n  cy.get('.sxctf-image-input input[name=\"location\"]').type('New York, NY');\n  cy.get('.sxctf-image-input input[name=\"date\"]').type(formattedDate);\n  cy.get('.sxctf-image-input input[name=\"distance\"]').type('5');\n  cy.get('.sxctf-image-input input[name=\"time\"]').type('3625');\n  cy.get('textarea').type('Running Log Generated from E2E Tests');\n  cy.get('button').contains('Create').click();\n\n  cy.wait('@createLog');\n\n  cy.getDataCy('alert').should('exist');\n  cy.getDataCy('alert').should('contain.text', 'Exercise log created!');\n\n  // The success message should disappear after 4 seconds.\n  cy.wait(4000);\n  cy.getDataCy('alert').should('not.exist');\n\n  cy.get('.dashboardButton').click();\n  cy.url().should('equal', `${Cypress.config('baseUrl')}/dashboard`);\n\n  cy.get('#logFeed .exerciseLog').should('have.length', 10);\n  cy.get('#logFeed .exerciseLog').eq(0).findDataCy('exerciseLogUser').should('contain.text', 'Andy Jarombek');\n  cy.get('#logFeed .exerciseLog').eq(0).findDataCy('exerciseLogTitle').should('contain.text', 'Test Run');\n  cy.get('#logFeed .exerciseLog').eq(0).findDataCy('exerciseLogDate').should('contain.text', finalFormattedDate);\n  cy.get('#logFeed .exerciseLog').eq(0).findDataCy('exerciseLogType').should('contain.text', 'RUN');\n  cy.get('#logFeed .exerciseLog').eq(0).findDataCy('exerciseLogLocation').should('contain.text', 'New York, NY');\n  cy.get('#logFeed .exerciseLog').eq(0).findDataCy('exerciseLogDistance').should('contain.text', '5 miles');\n  cy.get('#logFeed .exerciseLog').eq(0).findDataCy('exerciseLogTimePace').should('contain.text', '36:25 (7:17/mi)');\n  cy.get('#logFeed .exerciseLog').eq(0).should('have.class', 'average');\n  cy.get('#logFeed .exerciseLog')\n    .eq(0)\n    .findDataCy('exerciseLogDescription')\n    .should('contain.text', 'Running Log Generated from E2E Tests');\n});\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The test starts by filling out an exercise log creation form with the help of the Cypress ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"type()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" commands.  This code snippet also demonstrates how other JavaScript libraries, such as the moment.js date/time library, can be used in Cypress tests. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/8-11-21-saintsxctf-create-log-test.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy.get('button').contains('Create').click()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" clicks a button which makes an API call to create a new exercise log.  The Cypress test waits for this API call to complete with the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy.wait('@createLog')",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" command.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@createLog",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is an alias for a HTTP route.  It is defined at the beginning of the test with the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy.route('POST', '/api/v2/logs/').as('createLog')",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" command.  After the exercise log is created, the Cypress test navigates back to the dashboard page of the website and makes sure the new exercise log appears. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/8-11-21-saintsxctf-create-log-test-2.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"subtitle",
        "attributes":{
            "title":"Monthly Exercise Calendar"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Monthly Exercise Calendar",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Another advanced Cypress test is one for a monthly calendar tab on a user's profile page.  This test exists in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/v2.0.4/cypress/integration/NewLog.e2e.test.ts#L69-L109"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" NewLog.e2e.test.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"it('has a tab with a calendar of monthly exercise logs', () => {\n  cy.visit('/profile/andy');\n  cy.profileMockAPICalls();\n\n  cy.createRangeViewRoute('rangeViewCurrentMonthRoute', currentMonthRangeItems, 0, 'month', true);\n  cy.get('.tabs p').contains('Monthly Calendar').click();\n  cy.wait('@rangeViewCurrentMonthRoute');\n\n  const calendarMonth = moment().format('MMMM YYYY');\n\n  cy.getDataCy('currentMonth').should('contain.text', calendarMonth);\n  cy.calendarWeekCheck(0, [null, 5.39, 5.83, 8.64, 5.96, 8.75, 9.12], 43.69);\n  cy.calendarWeekCheck(1, [2.89, 5.89, 5.94, 11.96, 5.97, '8.80', 14.01], 55.46);\n  cy.calendarWeekCheck(2, [2.94, 4.55, 6.28, 6.52, 6.58, '12.00', null], 38.87);\n  cy.calendarWeekCheck(3, [null, null, null, null, null, null, null], '0.00');\n  cy.calendarWeekCheck(4, [null, null, null, null, null, null, null], '0.00');\n  cy.calendarWeekCheck(5, [null, null, null, null, null, null, null], '0.00');\n\n  // Go to the previous month.\n  cy.createRangeViewRoute('rangeViewPreviousMonthRoute', prevMonthRangeItems, 1, 'month', true);\n  cy.getDataCy('prevMonth').click();\n  cy.wait('@rangeViewPreviousMonthRoute');\n\n  const prevCalendarMonth = moment().subtract(1, 'month').format('MMMM YYYY');\n\n  cy.getDataCy('currentMonth').should('contain.text', prevCalendarMonth);\n  cy.calendarWeekCheck(0, [null, 5.42, 5.36, '5.40', 6.51, 6.01, 12.23], 40.93);\n  cy.calendarWeekCheck(1, [2.82, 5.42, 5.38, '5.40', 7.11, '6.00', 13.27], '45.40');\n  cy.calendarWeekCheck(2, [2.86, 5.44, 5.43, '5.40', 5.43, 11.27, 13.21], 49.04);\n  cy.calendarWeekCheck(3, [5.38, 2.83, 5.36, '5.40', 6.49, 6.02, 7.02], '38.50');\n  cy.calendarWeekCheck(4, [null, 5.39, 5.83, 8.64, 5.96, 8.75, 9.12], 43.69);\n  cy.calendarWeekCheck(5, [2.89, 5.89, 5.94, 11.96, 5.97, '8.80', 14.01], 55.46);\n\n  // Return to the current month.\n  cy.getDataCy('nextMonth').click();\n\n  cy.getDataCy('currentMonth').should('contain.text', calendarMonth);\n  cy.calendarWeekCheck(0, [null, 5.39, 5.83, 8.64, 5.96, 8.75, 9.12], 43.69);\n  cy.calendarWeekCheck(1, [2.89, 5.89, 5.94, 11.96, 5.97, '8.80', 14.01], 55.46);\n  cy.calendarWeekCheck(2, [2.94, 4.55, 6.28, 6.52, 6.58, '12.00', null], 38.87);\n  cy.calendarWeekCheck(3, [null, null, null, null, null, null, null], '0.00');\n  cy.calendarWeekCheck(4, [null, null, null, null, null, null, null], '0.00');\n  cy.calendarWeekCheck(5, [null, null, null, null, null, null, null], '0.00');\n});\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The test navigates to the profile page of user ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"andy",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and clicks on the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Monthly Calendar",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" tab.  From there, the Cypress test asserts that the calendar shows the proper month and exercise mileage statistics. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/8-11-21-saintsxctf-monthly-calendar.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The monthly calendar Cypress test utilizes multiple custom Cypress commands.  These include ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy.profileMockAPICalls()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" (located in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-web/blob/v2.0.4/cypress/support/profile.ts#L21-L26"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"profile.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-web/blob/v2.0.4/cypress/support/profile.d.ts#L24-L28"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"profile.d.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"), ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy.createRangeViewRoute()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" (located in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-web/blob/v2.0.4/cypress/support/shared.ts#L39-L81"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"shared.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-web/blob/v2.0.4/cypress/support/shared.d.ts#L29-L47"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"shared.d.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"), ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy.calendarWeekCheck()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" (located in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-web/blob/v2.0.4/cypress/support/shared.ts#L115-L155"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"shared.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-web/blob/v2.0.4/cypress/support/shared.d.ts#L65-L72"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"shared.d.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"), and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy.getDataCy()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" (located in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-web/blob/v2.0.4/cypress/support/commands.ts#L110-L112"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"commands.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-web/blob/v2.0.4/cypress/support/commands.d.ts#L37-L42"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"commands.d.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":").  I discuss custom Cypress commands in the next section of this article, but this code demonstrates how they can greatly simplify end to end tests. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" For example, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy.calendarWeekCheck()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" checks the mileage for each day in a week on the calendar.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy.calendarWeekCheck(0, [null, 5.39, 5.83, 8.64, 5.96, 8.75, 9.12], 43.69)",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" looks at the first week in the calendar, and asserts that the total mileage is ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"43.69",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  It iterates over each day, checking that the first day displays no mileage, the second day displays ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"5.39",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" miles, the third day displays ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"5.83",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" miles, etc. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/8-11-21-saintsxctf-monthly-calendar-2.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" This custom Cypress command is called six times for each month.  Since the test changes the month displayed on the calendar multiple times, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy.calendarWeekCheck()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is invoked almost 20 times.  Placing the logic for testing a week of calendar data in a reusable Cypress command saved many lines of code! ",
                "children":null
            }
        ]
    },
    {
        "el":"subtitle",
        "attributes":{
            "title":"API Error Scenario"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"API Error Scenario",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" One final advanced Cypress test checks what happens to the website if an API request fails.  Specifically, it checks the scenario where adding a user to a group in the website fails.  This test exists in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-web/blob/v2.0.4/cypress/integration/GroupAdmin.mock.e2e.test.ts#L377-L421"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"GroupAdmin.mock.e2e.test.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"it('shows an error if adding a pending user fails', () => {\n  cy.andyAdminMemberships();\n\n  const groupAlumniMembersRoute = cy.route({\n    method: 'GET',\n    url: '**/api/v2/groups/members/1',\n    response: '@groupAlumniAdminPendingMembers'\n  });\n\n  groupAlumniMembersRoute.as('groupAlumniMembersRoute');\n\n  cy.visit('/admin/group/1');\n\n  cy.alumniGroupAdminMockAPICalls();\n\n  const groupMembersUpdateErrorRoute = cy.route({\n    method: 'PUT',\n    url: '**/api/v2/groups/members/1/Tom',\n    response: {\n      self: '/v2/groups/members/1/Tom',\n      updated: false,\n      group_member: null,\n      error: 'The group membership failed to update.'\n    },\n    status: 500\n  });\n\n  groupMembersUpdateErrorRoute.as('groupMembersUpdateErrorRoute');\n\n  cy.getDataCy('alert').should('not.exist');\n  cy.getDataCy('pendingMember').eq(0).find('.aj-contained-button').should('contain.text', 'Accept').click();\n  cy.getDataCy('acceptDenyModal').find('.aj-contained-button').contains('ACCEPT MEMBERSHIP').click();\n\n  cy.wait('@groupMembersUpdateErrorRoute');\n\n  cy.getDataCy('alert').should('exist');\n  cy.getDataCy('alert').should(\n    'contain.text',\n    'An unexpected error occurred while accepting a users membership request. ' +\n      'Try reloading the page. If this error persists, contact andrew@jarombek.com.'\n  );\n\n  cy.getDataCy('alert').getDataCy('alertCloseIcon').click();\n  cy.getDataCy('alert').should('not.exist');\n});\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The main objective of this test is to prove that an error message is displayed to the user during an unexpected API failure scenario. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/8-11-21-saintsxctf-api-error.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The test starts by navigating to the webpage and mocking the API calls.  This test does not directly call the API, due to its specific data requirements.  It also needs to simulate a failed API call.  The failed API call is defined in the statement which creates the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"groupMembersUpdateErrorRoute",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" variable.  The function call to ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy.route()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" defines a custom API response and sets the HTTP status code to ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"500",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which is an error code for an internal server error.  Whenever an HTTP PUT request to a URL matching the pattern ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"**/api/v2/groups/members/1/Tom",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is made, Cypress intercepts it and returns the custom API response and status code. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The API route with the mocked response is given an alias ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"groupMembersUpdateErrorRoute",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  When attempting to accept a user into a group, the test ensures that this mocked API call is invoked with the command ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cy.wait('@groupMembersUpdateErrorRoute')",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". This command runs after the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Accept Membership",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" button is clicked. ",
                "children":null
            }
        ]
    },
    {
        "el":"figure",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"img",
                "attributes":{
                    "className":"jarombek-blog-image",
                    "src":"https://asset.jarombek.com/posts/8-11-21-saintsxctf-api-error-2.png"
                },
                "value":null,
                "children":[

                ]
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" After the mocked API call is invoked, the test asserts that the webpage displays an alert message explaining the error. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Custom Cypress Commands"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Custom Cypress Commands",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Cypress allows you to easily create custom commands or overwrite existing commands.  This helps make tests more readable and promotes the creation of reusable test code.  I use custom Cypress commands extensively in my end to end tests. Custom commands are found in the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/tree/v2.0.4/cypress/support"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"support",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" subdirectory of my repositories ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"cypress",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Cypress.Commands.add()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" creates a new Cypress command",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"7",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The following code creates a basic command named ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"setUserInLocalStorage",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" which puts a JSON string representing a user in the web browser's local storage.  It exists in my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/v2.0.4/cypress/support/commands.ts#L16-L41"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"commands.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file, which contains custom commands used throughout the end to end tests. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"Cypress.Commands.add('setUserInLocalStorage', () => {\n  localStorage.setItem(\n    'user',\n    JSON.stringify({\n      isFetching: false,\n      didInvalidate: false,\n      lastUpdated: 1596919187,\n      activation_code: 'abc123',\n      class_year: 2017,\n      deleted: null,\n      description: 'I sometimes like to run.',\n      email: 'andrew@jarombek.com',\n      favorite_event: 'Shakeout',\n      first: 'Andy',\n      last: 'Jarombek',\n      last_signin: '2020-08-13 12:53:18',\n      location: 'Riverside, CT',\n      member_since: '2016-12-23',\n      password: null,\n      salt: null,\n      subscribed: null,\n      username: 'andy',\n      week_start: 'monday'\n    })\n  );\n});\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Cypress.Commands.add()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" takes two arguments: the name of the custom command and the function body of the custom command.  Since my Cypress code is written in TypeScript, it also needs a type definition for the custom command.  A type definition prevents type errors when using custom commands, and also serves as useful documentation.  Each of my TypeScript files containing custom commands has a corresponding ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"*.d.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file, containing the type definitions.  For example, my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/\nv2.0.4/cypress/support/commands.ts"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"commands.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file has a corresponding ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-web/blob/v2.0.4/cypress/support/commands.d.ts"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"commands.d.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file, with the following type definition for my custom ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"setUserInLocalStorage",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" command. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"declare namespace Cypress {\n    interface Chainable {\n        /**\n         * Custom command to put user details in the browser's localStorage.\n         * @example setUserInLocalStorage()\n         */\n        setUserInLocalStorage(): void;\n\n        ...\n    }\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" This code adds the custom command type to the global Cypress ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Chainable",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" interface",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"8",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", making it accessible in TypeScript Cypress tests.  In my end to end tests, the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"setUserInLocalStorage",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" command is commonly used in pre-test hook functions, such as the following code snippet from ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/v2.0.4/cypress/\nintegration/Dashboard.e2e.test.ts#L16"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Dashboard.e2e.test.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"describe('Dashboard E2E Tests', () => {\n  beforeEach(() => {\n    cy.setUserInLocalStorage();\n    ...\n  });\n\n  ...\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Most of my custom Cypress commands encapsulate other Cypress commands that assert information about HTML elements.  In a prior example, I showed a Cypress test which looked at a monthly calendar of exercise data.  One of the custom Cypress commands used in that test, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"calendarWeekCheck()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", is shown below. It exists in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/v2.0.4/cypress/support/shared.ts#L115-L155"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" shared.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"Cypress.Commands.add(\n  'calendarWeekCheck',\n  (week: number, miles: (number | string | null)[], totalMiles: number | string) => {\n    cy.getDataCy('week')\n      .eq(week)\n      .findDataCy('day')\n      .eq(0)\n      .should(miles[0] ? 'contain.text' : 'not.contain.text', miles[0] ? `${miles[0]}Miles` : 'Miles');\n    cy.getDataCy('week')\n      .eq(week)\n      .findDataCy('day')\n      .eq(1)\n      .should(miles[1] ? 'contain.text' : 'not.contain.text', miles[1] ? `${miles[1]}Miles` : 'Miles');\n    cy.getDataCy('week')\n      .eq(week)\n      .findDataCy('day')\n      .eq(2)\n      .should(miles[2] ? 'contain.text' : 'not.contain.text', miles[2] ? `${miles[2]}Miles` : 'Miles');\n    cy.getDataCy('week')\n      .eq(week)\n      .findDataCy('day')\n      .eq(3)\n      .should(miles[3] ? 'contain.text' : 'not.contain.text', miles[3] ? `${miles[3]}Miles` : 'Miles');\n    cy.getDataCy('week')\n      .eq(week)\n      .findDataCy('day')\n      .eq(4)\n      .should(miles[4] ? 'contain.text' : 'not.contain.text', miles[4] ? `${miles[4]}Miles` : 'Miles');\n    cy.getDataCy('week')\n      .eq(week)\n      .findDataCy('day')\n      .eq(5)\n      .should(miles[5] ? 'contain.text' : 'not.contain.text', miles[5] ? `${miles[5]}Miles` : 'Miles');\n    cy.getDataCy('week')\n      .eq(week)\n      .findDataCy('day')\n      .eq(6)\n      .should(miles[6] ? 'contain.text' : 'not.contain.text', miles[6] ? `${miles[6]}Miles` : 'Miles');\n    cy.getDataCy('week').eq(week).findDataCy('weekTotal').should('contain.text', `${totalMiles}Miles`);\n  }\n);\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" This command goes through the seven days in the week and checks what text is displayed for each day in the calendar. While most of the sub-commands in the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"calendarWeekCheck()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" command are built-in Cypress commands, two are not: ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"getDataCy()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"findDataCy()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"Cypress.Commands.add('getDataCy', (value) => {\n  return cy.get(`[data-cypress=${value}]`);\n});\n\nCypress.Commands.add('findDataCy', { prevSubject: true }, (subject, value) => {\n  return cy.wrap(subject).find(`[data-cypress=${value}]`);\n});\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Both ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"getDataCy()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"findDataCy()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" retrieve HTML elements with ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" data attributes",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" named ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"data-cypress",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The value of the data attribute is passed to the Cypress commands through a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"value",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" parameter.  One thing you may have noticed is that ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"getDataCy()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"findDataCy()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" have return values, while the prior two custom Cypress commands did not.  As previously stated, Cypress commands are built to be chained together.  By returning the HTML elements with ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"data-cypress",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" data attributes, both these custom Cypress commands can be chained with regular Cypress commands.  You can see this in the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"calendarWeekCheck()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" command code. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The chainable properties of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"getDataCy()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"findDataCy()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" are made clear by looking at their type definitions in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/blob/v2.0.4/cypress/support/commands.d.ts#L37-L42"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"commands.d.ts",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", specifically their return types of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Chainable<Element>",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"/**\n * Chainable function for getting elements with a data-cypress attribute.\n * @param value The value of the data attribute on an HTML element.\n * @example getDataCy('button')\n */\ngetDataCy(value: string): Chainable<Element>;\n\n/**\n * Child chainable function for finding elements with a data-cypress attribute.\n * @param value The value of the data attribute on an HTML element.\n * @example findDataCy('button')\n */\nfindDataCy(value: string): Chainable<Element>;\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Another thing you may have noticed is that the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"findDataCy",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" command is defined with an additional ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"{ prevSubject: true }",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" value. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"prevSubject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" configures a command to either be a parent command or a child command",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"9",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  By default, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"prevSubject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is assigned the value ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"false",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which means it is a parent command that doesn't take a value from a previous command.  In other words, a parent command always appears at the beginning of a Cypress command chain. Unlike the previous commands I've shown which implicitly use the default value of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"prevSubject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"findDataCy",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is explicitly configured to be a child command.  This means it is always used in the middle or the end of a Cypress command chain.  Look closely at the definition of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"findDataCy",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and you will see it takes an additional ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"subject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" argument, which is the result of a prior Cypress command.  In this case, the prior result is a list of HTML elements. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" As a final custom Cypress command example, I want to show that custom commands don't necessarily have to just use built-in commands and other custom commands for their implementations.  The following ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"setTokenInLocalStorage",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" custom command makes an API call to my applications authentication API, and then sets the authentication token response in the browsers local storage and in an environment variable. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"TypeScript"
        },
        "value":"import axios from 'axios';\nimport * as moment from 'moment';\n\nCypress.Commands.add('setTokenInLocalStorage', () => {\n  const existingToken = Cypress.env('authToken');\n  const existingTokenExpiration = Cypress.env('authTokenExpiration');\n\n  if (existingToken && moment(existingTokenExpiration) > moment()) {\n    cy.log('Using existing token');\n    cy.log(`Existing token expires ${existingTokenExpiration}`);\n    localStorage.setItem('token', existingToken);\n    return;\n  }\n\n  cy.log('Retrieving new auth token');\n\n  const instance = axios.create({\n    baseURL: Cypress.env('authUrl'),\n    timeout: 5000\n  });\n\n  instance\n    .post('/token', {\n      clientId: 'andy',\n      clientSecret: Cypress.env('SXCTF_PASSWORD')\n    })\n    .then((res) => {\n      const token = res.data.result;\n      Cypress.env('authToken', token);\n\n      const tokenExpiration = moment().add('45', 'minutes').format();\n      Cypress.env('authTokenExpiration', tokenExpiration);\n\n      localStorage.setItem('token', token);\n    })\n    .catch((error) => {\n      console.info(error);\n    });\n});\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" All the custom commands shown in this article and many more are available on GitHub in my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-web/tree/v2.0.4/cypress/support"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saints-xctf-web",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" repository. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Conclusions"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Conclusions",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Cypress is my go-to end to end testing library.  It works great with both JavaScript and TypeScript, and has an easy to learn and extensible API.  The ability to run Cypress tests in a web browser and watch the tests interact with a web page is a fantastic feature that makes testing easy, even for newcomers to the front-end engineering space.  All my Cypress test code is available in my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/apollo-client-server-prototype/tree/master/\nclient/cypress"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"apollo-client-server-prototype",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-web/tree/\nv2.0.4/cypress"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saints-xctf-web",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" repositories on GitHub. ",
                "children":null
            }
        ]
    }
];

preview = content.slice(0, 2);

postName = "aug-11-2021-cypress-typescript";
postDate = new Date('2021-08-11T12:00:00');
existingPost = db.posts.findOne({name: postName});

postViews = (existingPost) ? existingPost.views : 0;

db.posts.remove({name: postName});
db.posts_content.remove({name: postName});

db.posts.insertOne({
    name: postName,
    title: "Building Cypress End to End Tests in TypeScript",
    description: `In this article, I discuss the basics of Cypress and how I use it to test my front-end applications.  
        All the Cypress test code I show is written in TypeScript.`,
    date: postDate,
    type: "Discovery",
    views: postViews,
    tags: [
        {
            name: "Cypress",
            picture: "https://asset.jarombek.com/logos/cypress.png",
            color: "cypress"
        },
        {
            name: "TypeScript",
            picture: "https://asset.jarombek.com/logos/ts.png",
            color: "typescript"
        },
        {
            name: "JavaScript",
            picture: "https://asset.jarombek.com/logos/js.png",
            color: "javascript"
        }
    ],
    preview,
    previewString: JSON.stringify(preview),
    sources: [
        {
            startName: "\"Configuration: cypress.json\", ",
            endName: "",
            linkName: "https://docs.cypress.io/guides/references/configuration#cypress-json",
            link: "https://docs.cypress.io/guides/references/configuration#cypress-json"
        },
        {
            startName: "\"Writing and Organizing Tests: Plugins file\", ",
            endName: "",
            linkName: "https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Plugins-file",
            link: "https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Plugins-file"
        },
        {
            startName: "\"E2E code coverage\", ",
            endName: "",
            linkName: "https://docs.cypress.io/guides/tooling/code-coverage#E2E-code-coverage",
            link: "https://docs.cypress.io/guides/tooling/code-coverage#E2E-code-coverage"
        },
        {
            startName: "\"Writing and Organizing Tests: Support file\", ",
            endName: "",
            linkName: "https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Support-file",
            link: "https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Support-file"
        },
        {
            startName: "\"TSConfig Reference: Types\", ",
            endName: "",
            linkName: "https://www.typescriptlang.org/tsconfig#types",
            link: "https://www.typescriptlang.org/tsconfig#types"
        },
        {
            startName: "\"Headless browser\", ",
            endName: "",
            linkName: "https://en.wikipedia.org/wiki/Headless_browser",
            link: "https://en.wikipedia.org/wiki/Headless_browser"
        },
        {
            startName: "\"Custom Commands\", ",
            endName: "",
            linkName: "https://docs.cypress.io/api/cypress-api/custom-commands",
            link: "https://docs.cypress.io/api/cypress-api/custom-commands"
        },
        {
            startName: "\"Types for custom commands\", ",
            endName: "",
            linkName: "https://docs.cypress.io/guides/tooling/typescript-support#Types-for-custom-commands",
            link: "https://docs.cypress.io/guides/tooling/typescript-support#Types-for-custom-commands"
        },
        {
            startName: "\"Custom Commands: Arguments\", ",
            endName: "",
            linkName: "https://docs.cypress.io/api/cypress-api/custom-commands#Arguments",
            link: "https://docs.cypress.io/api/cypress-api/custom-commands#Arguments"
        },
    ]
});

db.posts_content.insertOne({
    name: postName,
    date: postDate,
    content,
    contentString: JSON.stringify(content)
});
