/**
 * Script for the MongoDB Shell.
 * @author Andrew Jarombek
 * @since 12/7/2021
 */

connection = new Mongo();
db = connection.getDB("jarombekcom");

content = [
    {
        "el":"note",
        "attributes":{
            "type":"info"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" This is part of a series of articles on SaintsXCTF Version 2.0. The first article in the series provides an ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog/jun-14-2021-saints-xctf-v2-overview"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"overview of the application",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  You ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"DO NOT",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" need to read prior articles in the series to fully understand this article. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" While researching API frameworks and libraries, I grew interested in the Flask framework.  Flask is a very lightweight framework,  allowing engineers to quickly create APIs in Python without much opinionated tooling.  For example, Flask does not come installed with a database access layer or ORM, allowing engineers to pick whichever database access library they prefer.  This flexibility is appealing to me because it allows me to configure and design the API to my liking.  Also, working in Python is easy and allows me to quickly write API code. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" In this article, I begin by describing how I structured my SaintsXCTF API, which is written in Flask.  Next, I provide an overview of Flask and SQLAlchemy, an object relational mapper (ORM).  Finally, I dive into my API code.  You can view the code discussed in this article in my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saints-xctf-api",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" repository. ",
                "children":null
            }
        ]
    },
    {
        "el":"subtitle",
        "attributes":{
            "title":"SaintsXCTF Version 2.0 Articles"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"SaintsXCTF Version 2.0 Articles",
                "children":null
            }
        ]
    },
    {
        "el":"ul",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/jun-14-2021-saints-xctf-v2-overview"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Architectural Overview",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/jun-14-2021-saints-xctf-v2-overview"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"AWS Infrastructure",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/oct-25-2021-saints-xctf-v2-k8s-infrastructure"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Kubernetes Infrastructure",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/nov-1-2021-saints-xctf-v2-react-web-app"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"React Web Application Overview",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/nov-15-2021-react-typescript"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Web Application React and TypeScript",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/dec-3-2021-redux-react"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Web Application Redux State Configuration",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/aug-11-2021-cypress-typescript"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Web Application Cypress E2E Tests",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/jun-30-2021-react-jss"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Web Application JSS Modular Design",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"strong",
                        "attributes":null,
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Flask Python API",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/jan-10-2022-flask-api-testing"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Flask API Testing",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/feb-5-2022-function-api"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Function API Using API Gateway & Lambda",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/feb-18-2022-auth-api"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Auth API Using API Gateway & Lambda",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/mar-27-2022-mysql-client-kubernetes"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Database Client on Kubernetes",
                                "children":null
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"SaintsXCTF API Overview"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"SaintsXCTF API Overview",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The SaintsXCTF API is a REST API that returns JSON structured data.  One of the main design principles I used for the API is to include links in the JSON response bodies.  For example, take the entrypoint of the API. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Bash"
        },
        "value":"curl https://api.saintsxctf.com\n",
        "children":null
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JSON"
        },
        "value":"{\n    \"api_name\":\"saints-xctf-api\",\n    \"self_link\":\"/\",\n    \"versions_link\":\"/versions\"\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Two links are specified in the JSON response body.  The fields containing links are ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"self_link",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"versions_link",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"self_link",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" specifies the current API endpoint, and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"versions_link",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" specifies another endpoint that a user can navigate to. This allows users with no knowledge of the API structure to navigate the API without needing to reference external documentation.  Following the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"/versions",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" endpoint specified in the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"versions_link",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" field gives the following response. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Bash"
        },
        "value":"curl https://api.saintsxctf.com/versions\n",
        "children":null
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JSON"
        },
        "value":"{\n   \"self\":\"/versions\",\n   \"version_1\":null,\n   \"version_2\":\"/v2\",\n   \"version_latest\":\"/v2\"\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Once again, this API response provides more links to follow.  I'm currently using the second version of my SaintsXCTF API, so the remainder of my endpoints exist under the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"/v2",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" route. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Bash"
        },
        "value":"curl https://api.saintsxctf.com/v2\n",
        "children":null
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JSON"
        },
        "value":"{\n   \"latest\":true,\n   \"links\":\"/v2/links\",\n   \"self\":\"/v2\",\n   \"version\":2\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The root ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"/v2",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" route gives a bit of metadata about the API, and also provides a link to ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"/v2/links",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  If a user follows this route, they receive a list of all the top-level application endpoints in the API. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Bash"
        },
        "value":"curl https://api.saintsxctf.com/v2/links\n",
        "children":null
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JSON"
        },
        "value":"{\n   \"activation_code\":\"/v2/activation_code/links\",\n   \"comment\":\"/v2/comments/links\",\n   \"flair\":\"/v2/flair/links\",\n   \"forgot_password\":\"/v2/forgot_password/links\",\n   \"group\":\"/v2/groups/links\",\n   \"log\":\"/v2/logs/links\",\n   \"log_feed\":\"/v2/log_feed/links\",\n   \"notification\":\"/v2/notifications/links\",\n   \"range_view\":\"/v2/range_view/links\",\n   \"self\":\"/v2/links\",\n   \"team\":\"/v2/teams/links\",\n   \"user\":\"/v2/users/links\"\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Let's say you are navigating through the API and are interested in viewing user routes.  Following the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"/v2/users/links",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" route returns all the user endpoints that are available, and what each endpoint is used for. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Bash"
        },
        "value":"curl https://api.saintsxctf.com/v2/users/links\n",
        "children":null
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JSON"
        },
        "value":"{\n   \"endpoints\":[\n      {\n         \"description\":\"Get all the users in the database.\",\n         \"link\":\"/v2/users\",\n         \"verb\":\"GET\"\n      },\n      {\n         \"description\":\"Create a new user.\",\n         \"link\":\"/v2/users\",\n         \"verb\":\"POST\"\n      },\n      {\n         \"description\":\"Retrieve a single user with a given username.\",\n         \"link\":\"/v2/users/<username>\",\n         \"verb\":\"GET\"\n      },\n      {\n         \"description\":\"Update a user with a given username.\",\n         \"link\":\"/v2/users/<username>\",\n         \"verb\":\"PUT\"\n      },\n      {\n         \"description\":\"Soft delete a user with a given username.\",\n         \"link\":\"/v2/users/soft/<username>\",\n         \"verb\":\"DELETE\"\n      },\n      ...\n   ],\n   \"self\":\"/v2/users/links\"\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" I shortened the API response for brevity.  After viewing this list of API endpoints, a user can determine which ones to invoke to match their needs.  Let's say you decide to invoke the GET endpoint ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"/v2/users/<username>",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" with the username ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"andy",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  Doing so results in the following response: ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Bash"
        },
        "value":"curl https://api.saintsxctf.com/v2/users/andy\n",
        "children":null
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JSON"
        },
        "value":"{\n   \"api_index\":\"/versions\",\n   \"contact\":\"andrew@jarombek.com\",\n   \"error_description\":\"Unauthorized\",\n   \"exception\":\"401 Unauthorized: The server could not verify that you are authorized to access the URL requested. You either supplied the wrong credentials (e.g. a bad password), or your browser doesn't understand how to supply the credentials required.\"\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Invoking the endpoint resulted in an HTTP 401 error.  Many of the endpoints in my API are protected, requiring a temporary token in the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Authorization",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" header in order to access the API. If you don't supply a token or provide an invalid token, the API returns 401 and 403 errors, respectively.  Providing a valid token in the HTTP request header results in the response below. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Bash"
        },
        "value":"curl -H \"Authorization: Bearer xxx\" https://api.saintsxctf.com/v2/users/andy\n",
        "children":null
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JSON"
        },
        "value":"{\n   \"self\":\"/v2/users/andy\",\n   \"user\":{\n      \"activation_code\":\"BbXuat\",\n      \"class_year\":2017,\n      \"deleted\":false,\n      \"description\":\"I sometimes like to run...\",\n      \"email\":\"andrew@jarombek.com\",\n      \"favorite_event\":\"Shakeout\",\n      \"first\":\"Andy\",\n      \"last\":\"Jarombek\",\n      \"last_signin\":\"2021-05-30 18:42:42\",\n      \"location\":\"New York, NY\",\n      \"member_since\":\"2016-12-23\",\n      \"password\":\"$2b$12$KDaX8hy3P1fZnG9nUVf1TeXw/rJJ4YaEXYdBi.Bx9k8v3DRFeHQ8a\",\n      \"profilepic_name\":\"1629931871738.jpg\",\n      \"salt\":\"RjJH6PIndLmr8S5sjgGUj8\",\n      \"subscribed\":null,\n      \"username\":\"andy\",\n      \"week_start\":\"monday\"\n   }\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" I omitted the actual API token, a JWT, from the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"curl",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" command above.  This time, the API responded successfully with a JSON object of my user in SaintsXCTF. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The SaintsXCTF API is a CRUD (",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"C",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"reate ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"R",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"ead ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"U",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"pdate ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"D",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"elete) REST API.  Therefore, API endpoints aren't limited to GET requests.  Users can also perform POST, PUT, and DELETE requests.  The example below is a POST request that creates a new exercise log for my user. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Bash"
        },
        "value":"\nRequestBody='{\"username\":\"andy\",\"first\":\"Andy\",\"last\":\"Jarombek\",\"name\":\"NYRR Night at the Races\",\"location\":\"New York, NY\",\"date\":\"2021-12-16\",\"type\":\"run\",\"distance\":10.5,\"metric\":\"miles\",\"time\":\"00:00:00\",\"feel\":6,\"description\":\"\"}'\ncurl -X POST \\\n    -d \"${RequestBody}\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer xxx\" \\\n    https://saintsxctf.com/api/v2/logs/\n",
        "children":null
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JSON"
        },
        "value":"{\n   \"added\":true,\n   \"log\":{\n      \"date\":\"2021-12-16\",\n      \"deleted\":false,\n      \"description\":\"\",\n      \"distance\":10.5,\n      \"feel\":6,\n      \"first\":\"Andy\",\n      \"last\":\"Jarombek\",\n      \"location\":\"New York, NY\",\n      \"log_id\":47462,\n      \"metric\":\"miles\",\n      \"miles\":10.5,\n      \"name\":\"NYRR Night at the Races\",\n      \"pace\":\"00:00:00\",\n      \"time\":\"00:00:00\",\n      \"time_created\":\"Fri, 17 Dec 2021 22:56:40 GMT\",\n      \"type\":\"run\",\n      \"username\":\"andy\"\n   },\n   \"self\":\"/v2/logs\"\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" One of the main objectives of the API is to make it as easy to use and navigate as possible.  This not only improves the experience for other users, but also for myself as I revisit and refactor the API codebase.  While adding links to the JSON responses makes the API easier to explore, there is still some information that it lacks.  This includes authentication mechanisms and documentation of JSON request body structures (such as the request body JSON for the exercise log  shown above).  This information requires additional documentation.  I am currently working on Swagger API documentation for this purpose, and will likely write about Swagger and the OpenAPI specification in a future article. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Flask Overview"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Flask Overview",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Flask is a lightweight web application framework which is commonly used to build REST APIs.  Flask applications are written in Python, with the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://pypi.org/project/Flask/"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Flask library",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" at their core.  Flask doesn't do much beyond handling routing, so a lot of the API functionality comes from other libraries (such as ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://pypi.org/project/Flask-SQLAlchemy/"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"flask-sqlalchemy",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" for a Database ORM and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://pypi.org/project/Bcrypt-Flask/"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"flask-bcrypt",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" for bcrypt password hashing). ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"SQLAlchemy Overview"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"SQLAlchemy Overview",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" In my API, SQLAlchemy is used for accessing a MySQL database.  I use the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://pypi.org/project/Flask-SQLAlchemy/"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"flask-sqlalchemy",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" library, which is a wrapper around SQLAlchemy,  making it easier to use in a Flask application. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" SQLAlchemy is an ORM and SQL database library for Python.  SQLAlchemy works with many different database engines; in my case, SQLAlchemy is used to query data from MySQL. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"API File Structure"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"API File Structure",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" In my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saints-xctf-api",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" repository, the Flask application exists in an ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/tree/master/api/src"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"api/src",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory. ",
                "children":null
            }
        ]
    },
    {
        "el":"inlineimage",
        "attributes":{
            "filename":"12-24-21-api-file-structure.png"
        },
        "value":null,
        "children":[

        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The top level directory of the Flask application contains configuration files and infrastructure setup.  The infrastructure setup consists of an Nginx reverse-proxy server (",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/\nblob/master/api/src/nginx.conf"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"nginx.conf",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"), a uWSGI application server (",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-api/blob/master/api/src/uwsgi.ini"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"uwsgi.ini",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"), and Dockerfiles for each.  The configuration files for Flask are discussed in the next section. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" There are also several subdirectories in the Flask application.   ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"dao",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" contains files that follow the Data Access Object (DAO) pattern",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"1",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  In essence, each DAO file consists of a class with methods which interact with the MySQL database using SQLAlchemy.  ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"model",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" contains models for use in the SQLAlchemy ORM.  Each model is a Python class that corresponds to a table in MySQL. ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"route",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" defines all the routes (endpoints) in the API.  Each route is bound to a Python function which performs the logic needed to return a proper HTTP response.  ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"tests",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" contains unit and integration tests for the API.  ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"utils",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" contains reusable utility functions used throughout the API. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Flask Configuration"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Flask Configuration",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The configuration of my Flask application begins with a small file named ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/blob/master/api/src/main.py"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"main.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Python"
        },
        "value":"# main.py\n\nfrom app import app\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"main.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is the entrypoint for the Flask application in the production environment.  A uWSGI application server uses this file to run the API.  ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"main.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" simply imports a variable named ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"app",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" from ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/blob/\nmaster/api/src/app.py"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"app.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"app",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is an instance of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Flask",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", an object representing the Flask application.  I initialize ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"app",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" in a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"create_app()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function, found within ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/blob/master/api/src/app.py#L32-L149"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" app.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Python"
        },
        "value":"# app.py\n\ndef create_app(config_name) -> Flask:\n    \"\"\"\n    Application factory function for the Flask app.\n    Source: http://flask.pocoo.org/docs/1.0/patterns/appfactories/\n    \"\"\"\n    application = Flask(__name__)\n    application.config.from_object(config[config_name])\n\n    application.register_blueprint(activation_code_route)\n    application.register_blueprint(api_route)\n    application.register_blueprint(user_route)\n    application.register_blueprint(forgot_password_route)\n    application.register_blueprint(flair_route)\n    application.register_blueprint(log_route)\n    application.register_blueprint(log_feed_route)\n    application.register_blueprint(group_route)\n    application.register_blueprint(comment_route)\n    application.register_blueprint(range_view_route)\n    application.register_blueprint(notification_route)\n    application.register_blueprint(team_route)\n\n    application.config['SQLALCHEMY_DATABASE_URI'] = get_connection_url()\n    application.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n    application.config['SQLALCHEMY_RECORD_QUERIES'] = True\n    application.config['SLOW_DB_QUERY_TIME'] = 0.5\n\n    db.init_app(application)\n    flask_bcrypt.init_app(application)\n\n    application.cli.add_command(test)\n\n    # Custom Error Handling\n    @application.errorhandler(401)\n    def error_403(ex):\n        \"\"\"\n        Custom error handler for when 401 HTTP codes occur.\n        :param ex: String representing the error that occurred.\n        :return: JSON describing the error.\n        \"\"\"\n        return jsonify({\n            'error_description': \"Unauthorized\",\n            'exception': str(ex),\n            'contact': 'andrew@jarombek.com',\n            'api_index': '/versions'\n        }), 401\n\n    ...\n\n    return application\n\n\nflask_env = os.getenv('FLASK_ENV') or 'local'\napp = create_app(flask_env)\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" I simplified the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"create_app()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" code snippet a bit, making it easier to discuss. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"create_app()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" takes a single ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"config_name",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" argument, which is the environment that the Flask application is run within.  For example, when run in production, the value of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"config_name",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"production",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". The first line, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"application = Flask(__name__)",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", creates an instance of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Flask",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"application",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is eventually the return value of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"create_app()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", representing the Flask API. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The next line, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"application.config.from_object(config[config_name])",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", sets configuration key-value pairs for the Flask application.  The values of the Flask configuration are environment specific. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"config[config_name]",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a Python object with properties. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"config",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is defined in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-api/blob/master/api/src/config.py"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"config.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file, as shown below. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Python"
        },
        "value":"# config.py\n\nclass LocalConfig:\n    ENV = 'local'\n    AUTH_URL = 'http://saints-xctf-auth:5000'\n    FUNCTION_URL = 'https://dev.fn.saintsxctf.com'\n\n\nclass DevelopmentConfig:\n    ENV = 'dev'\n    AUTH_URL = 'https://dev.auth.saintsxctf.com'\n    FUNCTION_URL = 'https://dev.fn.saintsxctf.com'\n\n\nclass ProductionConfig:\n    ENV = 'prod'\n    AUTH_URL = 'https://auth.saintsxctf.com'\n    FUNCTION_URL = 'https://fn.saintsxctf.com'\n\n\nconfig = {\n    'local': LocalConfig,\n    'development': DevelopmentConfig,\n    'production': ProductionConfig\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"config",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a dictionary where the keys are environment names and values are classes with Flask configuration properties.  In a production environment, the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ProductionConfig",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" class is the configuration for my Flask application. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Back to the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"create_app()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function, all the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"application.register_blueprint()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" invocations are used to configure routes in the API.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"register_blueprint()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" takes a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Blueprint",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" object as an argument.  In Flask, a blueprint is an application component which is registered with the main Flask application",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"2",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  In my application, each blueprint is bound to a specific URL and contains all the endpoints under that URL. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" For example, the call to ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"application.register_blueprint(user_route)",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" registers a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"user_route",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" blueprint, which is defined in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/blob/master/api/src/route/userRoute.py#L41"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"userRoute.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The creation of the blueprint, which is assigned to the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"/v2/users",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" route, is demonstrated below. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Python"
        },
        "value":"# userRoute.py\n\nfrom flask import Blueprint\n\nuser_route = Blueprint('user_route', __name__, url_prefix='/v2/users')\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" After registering blueprints for the Flask application in ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"create_app()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", I set four additional configuration variables by adding key-value pairs to the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"application.config",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" dictionary.  These configuration variables are separate from the ones discussed previously, such as those found in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-api/blob/master/api/src/config.py"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"config.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", because they have the same values across all environments. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Next in ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"create_app()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", I call ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"db.init_app(application)",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  This line of code initializes SQLAlchemy in the Flask application.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"db",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is an instance of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"SQLAlchemy",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" from the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"flask-sqlalchemy",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" library, which is defined in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/blob/master/api/src/database.py"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"database.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Python"
        },
        "value":"# database.py\n\nfrom flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The next line, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"flask_bcrypt.init_app(application)",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", initializes the Bcrypt password hashing algorithm with Flask.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"application.cli.add_command(test)",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"  adds a new command to the Flask CLI for testing the application.  The CLI command is defined in a separate ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/blob/master/api/src/commands.py"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"commands.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file and is invoked using a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"python -m flask test",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" shell command. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The remainder of the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"create_app()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function sets custom error messages for different HTTPS error codes.  The custom error messages are JSON strings, all of which can be viewed in the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/blob/master/api/src/app.py#L64-L147"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"app.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Database Models"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Database Models",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The Flask API accesses data from a MySQL database using the SQLAlchemy library.  SQLAlchemy contains an ORM (Object Relational Mapping), allowing applications to build Python classes representing SQL tables.  Instantiated objects of these Python classes (referred to as \"model classes\") contain a single row of data from the database table. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Model classes in my application exist in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/tree/master/api/src/\nmodel"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"model",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory.  One example model class is ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"User",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which represents a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"user",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" table in the MySQL database.  This model exists in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/blob/master/api/src/model/User.py"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"User.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Python"
        },
        "value":"# User.py\n\nfrom database import db\nfrom sqlalchemy import Column\nfrom sqlalchemy.orm import deferred\nfrom sqlalchemy.dialects.mysql import LONGBLOB\n\n\nclass User(db.Model):\n    __tablename__ = 'users'\n\n    # Data Columns\n    username = Column(db.VARCHAR(20), primary_key=True)\n    first = Column(db.VARCHAR(30), nullable=False, index=True)\n    last = Column(db.VARCHAR(30), nullable=False, index=True)\n    salt = Column(db.VARCHAR(255))\n    password = Column(db.VARCHAR(255), nullable=False)\n    profilepic = deferred(Column(LONGBLOB), group='pictures')\n    profilepic_name = deferred(Column(db.VARCHAR(50)), group='pictures')\n    description = Column(db.VARCHAR(255))\n    member_since = Column(db.DATE, nullable=False)\n    class_year = Column(db.INTEGER, index=True)\n    location = Column(db.VARCHAR(50))\n    favorite_event = Column(db.VARCHAR(20))\n    activation_code = Column(db.VARCHAR(8), nullable=False)\n    email = Column(db.VARCHAR(50), index=True)\n    subscribed = Column(db.CHAR(1))\n    last_signin = Column(db.DATETIME, nullable=False)\n    week_start = Column(db.VARCHAR(15))\n    deleted = Column(db.BOOLEAN)\n\n    # Audit Columns\n    created_date = Column(db.DATETIME)\n    created_user = Column(db.VARCHAR(31))\n    created_app = Column(db.VARCHAR(31))\n    modified_date = Column(db.DATETIME)\n    modified_user = Column(db.VARCHAR(31))\n    modified_app = Column(db.VARCHAR(31))\n    deleted_date = Column(db.DATETIME)\n    deleted_user = Column(db.VARCHAR(31))\n    deleted_app = Column(db.VARCHAR(31))\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Model classes extend the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"db.Model",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" base class provided by SQLAlchemy.  The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"__tablename__",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" field holds the name of the table in MySQL that the model is associated with.  The remaining fields are the columns in the table and their associated data types.  For example, one column in the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"user",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" table is ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"username",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which holds a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"VARCHAR",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" of length ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"20",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"username",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is the primary key of the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"user",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" table, since every user has a unique username.  This column is defined as a field in the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"User",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" model object with the line ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"username = Column(db.VARCHAR(20), primary_key=True)",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" I omitted a few details of the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"User",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" model from the code snippet above, which I will discuss now. First, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"User",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" has an ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"__init__",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" constructor for ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/blob/master/api/src/model/User.py#L15-L46"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" converting a dictionary to an instance of the model",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  Second, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"User",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" implements ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"__str__",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"__repr__",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" methods for ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/blob/master/api/src/model/\nUser.py#L87-L103"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"printing out model objects cleanly in application logs",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  Third and finally, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"User",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" implements ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"__eq__",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" to ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/blob/master/api/src/model/User.py#L105-L137"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"compare two instances of User for equality",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" For each table in the MySQL database, my API has two corresponding model classes.  The naming convention for these classes is ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TableName",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"TableNameData",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  For example, the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"user",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" table has ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"User",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UserData",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" model classes.  The reason for this structure is that the main model class has auditing columns that shouldn't be included in API response bodies.  Therefore, the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"User",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" model class is used to query the database, and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UserData",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is used in API responses.  Note that many APIs won't require a structure like this, and a single model class per table will suffice.  The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UserData",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" class exists in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-api/blob/master/api/src/model/UserData.py"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"UserData",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Data Access Objects"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Data Access Objects",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Data Access Objects (DAOs) are classes that interface with a data source; in the case of my API, a MySQL database. Separate DAOs are used for individual tables or multiple tables with similar business logic.  All the DAOs in my application exist in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/tree/master/api/src/dao"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"dao",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" For business logic related to users, I have a DAO named ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/blob/\nmaster/api/src/dao/userDao.py"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"userDao.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"userDao.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" defines a single DAO class named ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UserDao",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  Most of the methods in ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UserDao",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" are related to a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"user",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" table, however there is also some logic that alters data in different tables.  A shortened version of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UserDao",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is shown below. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Python"
        },
        "value":"# userDao.py\n\nfrom typing import List\n\nfrom database import db\nfrom dao.basicDao import BasicDao\nfrom model.User import User\n\n\nclass UserDao:\n\n    @staticmethod\n    def get_users() -> List[User]:\n        \"\"\"\n        Get a list of all the users in the database.\n        :return: A list containing User model objects.\n        \"\"\"\n        return User.query.filter(User.deleted.is_(False)).all()\n\n    @staticmethod\n    def get_user_by_username(username: str) -> User:\n        \"\"\"\n        Get a single user from the database based on their username.\n        :param username: Username which uniquely identifies the user.\n        :return: The result of the database query.\n        \"\"\"\n        return User.query\\\n            .filter_by(username=username)\\\n            .filter(User.deleted.is_(False))\\\n            .first()\n\n    @staticmethod\n    def add_user(user: User) -> bool:\n        \"\"\"\n        Add a user if it has a valid activation code.\n        :param user: Object representing a user for the application.\n        :return: True if the user is inserted into the database, False otherwise.\n        \"\"\"\n        db.session.add(user)\n        return BasicDao.safe_commit()\n\n    @staticmethod\n    def update_user(username: str, user: User) -> bool:\n        \"\"\"\n        Update a user in the database.  This function does NOT update passwords.\n        :param username: Username which uniquely identifies the user.\n        :param user: Object representing an updated user for the application.\n        :return: True if the user is updated in the database, False otherwise.\n        \"\"\"\n        db.session.execute(\n            '''\n            UPDATE users SET\n                first=:first,\n                last=:last,\n                email=:email,\n                profilepic_name=:profilepic_name,\n                description=:description,\n                class_year=:class_year,\n                location=:location,\n                favorite_event=:favorite_event,\n                week_start=:week_start\n            WHERE username=:username\n            AND deleted IS FALSE\n            ''',\n            {\n                'first': user.first,\n                'last': user.last,\n                'email': user.email,\n                'profilepic_name': user.profilepic_name,\n                'description': user.description,\n                'class_year': user.class_year,\n                'location': user.location,\n                'favorite_event': user.favorite_event,\n                'week_start': user.week_start,\n                'username': username\n            }\n        )\n        return BasicDao.safe_commit()\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UserDao",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" contains static methods which interact with MySQL using SQLAlchemy (the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"db",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" variable is an instance of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"SQLAlchemy",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":").  Two different approaches are used to interact with the database.  The first is to use the ORM and the second is to write SQL queries and execute them.  For example, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"get_user_by_username()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" uses the ORM and the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"User",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" model class to find a user in the database with a specific username.  On the other hand, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"update_user()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" uses a SQL query to update a user in the database.  Which approach is better is often a matter of personal preference.  SQL is more expressive and easier to read for complex queries.  The ORM avoids mixing SQL and Python code, and is easy to use for simple queries.  The great thing about SQLAlchemy is that it offers both approaches for engineers to use. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" One final note about the DAOs in my application.  For inserts, updates, and deletes, my DAO methods use a function called ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"BasicDao.safe_commit()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  This is a custom function that attempts to commit one or many changes to the database as a transaction, and performs a rollback if the transaction fails.  The code for this function is shown below and exists in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/blob/master/\napi/src/dao/basicDao.py"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"basicDao.py",
                        "children":null
                    }
                ]
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Python"
        },
        "value":"# basicDao.py\n\nfrom database import db\nfrom flask import current_app\nfrom sqlalchemy.exc import SQLAlchemyError\n\n\nclass BasicDao:\n\n    @staticmethod\n    def safe_commit() -> bool:\n        \"\"\"\n        Safely attempt to commit changes to MySQL.  Rollback in case of a failure.\n        :return: True if the commit was successful, False if a rollback occurred.\n        \"\"\"\n        try:\n            db.session.commit()\n            current_app.logger.info('SQL Safely Committed')\n            return True\n        except SQLAlchemyError as error:\n            db.session.rollback()\n            current_app.logger.error('SQL Commit Failed!  Rolling back...')\n            current_app.logger.error(error.args)\n            return False\n",
        "children":null
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"API Routes"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"API Routes",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" So far, we've seen how DAOs interact with the database and use SQLAlchemy model classes to retrieve, update, create, or delete data.  Of course, user's of the API don't interface with the DAO directly.  Instead, users call endpoints (routes) in the REST API and request operations to be performed.  These endpoints are defined and configured in the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/tree/master/api/src/route"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"route",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" directory of my application. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Route files contain functions, each of which represents an endpoint in the API.  Each file also defines a Flask blueprint - a component representing a route in the API with sub-routes attached to it.  Flask blueprints are instantiated as Python objects.  Blueprint objects are used to annotate functions in the route file. These annotations specify which route the function is associated with and what HTTP methods it responds to. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" For example, I have a route file for all the endpoints that provide metadata about the API.  These endpoints exist in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/blob/master/api/src/route/apiRoute.py"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"apiRoute.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file.  A shortened version of the route file is shown below. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Python"
        },
        "value":"# apiRoute.py\n\nfrom flask import Blueprint, jsonify, Response\n\napi_route = Blueprint('api_route', __name__, url_prefix='/')\n\n\n@api_route.route('/', methods=['GET'])\ndef api() -> Response:\n    return jsonify({\n        'self_link': '/',\n        'api_name': 'saints-xctf-api',\n        'versions_link': '/versions'\n    })\n\n\n@api_route.route('/versions', methods=['GET'])\ndef versions() -> Response:\n    return jsonify({\n        'self': '/versions',\n        'version_latest': '/v2',\n        'version_1': None,\n        'version_2': '/v2'\n    })\n\n\n@api_route.route('/v2', methods=['GET'])\ndef version2() -> Response:\n    return jsonify({\n        'self': '/v2',\n        'version': 2,\n        'latest': True,\n        'links': '/v2/links'\n    })\n\n\n@api_route.route('/v2/links', methods=['GET'])\ndef links() -> Response:\n    return jsonify({\n        'self': '/v2/links',\n        'activation_code': '/v2/activation_code/links',\n        'comment': '/v2/comments/links',\n        'flair': '/v2/flair/links',\n        'forgot_password': '/v2/forgot_password/links',\n        'group': '/v2/groups/links',\n        'log_feed': '/v2/log_feed/links',\n        'log': '/v2/logs/links',\n        'message_feed': '/v2/message_feed/links',\n        'message': '/v2/messages/links',\n        'notification': '/v2/notifications/links',\n        'range_view': '/v2/range_view/links',\n        'team': '/v2/teams/links',\n        'user': '/v2/users/links'\n    })\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The Blueprint for the route file is assigned to the variable ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"api_route",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and instantiated with a call to its constructor: ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Blueprint('api_route', __name__, url_prefix='/')",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  This blueprint is assigned to the root route in the API (",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"'/'",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":") via the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"url_prefix",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" keyword argument. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The first function, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"api()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", configures an endpoint for the route ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"/",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The endpoint route is a combination of the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"url_prefix",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" from the blueprint and the first argument to the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@api_route.route()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" annotation.  The URL prefix is ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"/",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and the route annotation is ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"/",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which can be simplified to ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"/",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"methods",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" keyword argument to ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@api_route.route()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" specifies all the HTTP methods that the endpoint responds to; in the case of the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"/",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" route, only HTTP GET requests are handled. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"api()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" method returns a Flask ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Response",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" object, representing an HTTP response.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"api()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" uses a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"jsonify()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function from the Flask library to build this response. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"jsonify()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" takes a dictionary as an argument, converts it to JSON, and wraps that JSON in a Flask ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Response",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" object.  From the API user perspective, navigating to the route ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"/",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" returns this JSON object and a HTTP 200 success code. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Bash"
        },
        "value":"curl https://api.saintsxctf.com\n",
        "children":null
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JSON"
        },
        "value":"{\n    \"api_name\":\"saints-xctf-api\",\n    \"self_link\":\"/\",\n    \"versions_link\":\"/versions\"\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The other routes in the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/blob/master/api/src/route/apiRoute.py"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" apiRoute.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file follow a similar pattern of returning static JSON objects. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/blob/master/api/src/route/userRoute.py"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"userRoute.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a more complex route file, including dynamic JSON responses dependent on user inputs and database query results.  It not only contains HTTP GET requests, but also POST, PUT, and DELETE requests.  A generalized outline of ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"userRoute.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is shown below. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Python"
        },
        "value":"# userRoute.py\n\nuser_route = Blueprint('user_route', __name__, url_prefix='/v2/users')\n\n\n@user_route.route('', methods=['GET', 'POST'])\n@auth_required(enabled_methods=[GET])\ndef users_redirect() -> Response:\n    \"\"\"\n    Redirect endpoints looking for a resource named 'users' to the user routes.\n    :return: Response object letting the caller know where to redirect the request to.\n    \"\"\"\n    if request.method == 'GET':\n        ''' [GET] /v2/users '''\n        return redirect(url_for('user_route.users'), code=302)\n\n    elif request.method == 'POST':\n        ''' [POST] /v2/users '''\n        return redirect(url_for('user_route.users'), code=307)\n\n\n@user_route.route('/', methods=['GET', 'POST'])\n@auth_required(enabled_methods=[GET])\ndef users() -> Response:\n    \"\"\"\n    Endpoints for searching all the users or creating a user\n    :return: JSON representation of a list of users and relevant metadata\n    \"\"\"\n    if request.method == 'GET':\n        ''' [GET] /v2/users/ '''\n        return users_get()\n\n    elif request.method == 'POST':\n        ''' [POST] /v2/users/ '''\n        return user_post()\n\n\n@user_route.route('/<username>', methods=['GET', 'PUT', 'DELETE'])\n@auth_required()\n@disabled(disabled_methods=[DELETE])\ndef user(username) -> Response:\n    \"\"\"\n    Endpoints for specific users (searching, updating, or deleting)\n    :param username: Username (or email) of a User\n    :return: JSON representation of a user and relevant metadata\n    \"\"\"\n    if request.method == 'GET':\n        ''' [GET] /v2/users/<username> '''\n        return user_by_username_get(username)\n\n    elif request.method == 'PUT':\n        ''' [PUT] /v2/users/<username> '''\n        return user_by_username_put(username)\n\n    elif request.method == 'DELETE':\n        ''' [DELETE] /v2/users/<username> '''\n        return user_by_username_delete(username)\n\n\n@user_route.route('/soft/<username>', methods=['DELETE'])\n@auth_required()\ndef user_soft_by_username(username) -> Response:\n    \"\"\"\n    Endpoints for soft deleting a user.\n    :param username: Username of a User.\n    :return: JSON representation of users and relevant metadata.\n    \"\"\"\n    if request.method == 'DELETE':\n        ''' [DELETE] /v2/users/soft/<username> '''\n        return user_by_username_soft_delete(username)\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" At its core, ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"userRoute.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is the same as its simpler ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"apiRoute.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" counterpart.  It contains a blueprint with a URL prefix and functions associated with HTTP requests to sub-URLs.  This time, functions handle multiple HTTP verbs and often require authentication. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" For example, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"users()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" handles both HTTP GET and POST verbs, as specified by its decorator ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@user_route.route('/', methods=['GET', 'POST'])",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  It also requires authentication, which is specified by a custom decorator ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@auth_required(enabled_methods=[GET])",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The keyword argument ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"enabled_methods=[GET]",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" specifies that only GET requests require authentication; POST methods do not. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" How requests are handled in ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"users()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" depends on the HTTP verb, which is accessed through the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"request.method",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" property.  If a HTTP GET request is made, a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"users_get()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function is invoked;  if a HTTP POST request is made, a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"user_post()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function is invoked. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"users_get()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is shown below. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Python"
        },
        "value":"def users_get() -> Response:\n    \"\"\"\n    Retrieve all the users in the database.\n    :return: A response object for the GET API request.\n    \"\"\"\n    all_users: list = UserDao.get_users()\n\n    if all_users is None:\n        response = jsonify({\n            'self': '/v2/users',\n            'users': None,\n            'error': 'an unexpected error occurred retrieving users'\n        })\n        response.status_code = 500\n        return response\n    else:\n        user_dicts = []\n\n        for user in all_users:\n            user_dict = UserData(user).__dict__\n            user_dict['this_user'] = f'/v2/users/{user_dict[\"username\"]}'\n\n            if user_dict.get('member_since') is not None:\n                user_dict['member_since'] = str(user_dict['member_since'])\n            if user_dict.get('last_signin') is not None:\n                user_dict['last_signin'] = str(user_dict['last_signin'])\n\n            user_dicts.append(user_dict)\n\n        response = jsonify({\n            'self': '/v2/users',\n            'users': user_dicts\n        })\n        response.status_code = 200\n        return response\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Similar to the routes in ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"apiRoute.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"users_get()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" returns JSON responses generated by ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"jsonify()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  However, the logic is a bit more complex since a DAO is leveraged to get data from MySQL, specifically ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UserDao.get_users()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The format of the response JSON and the response status code depends on the result of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UserDao.get_users()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  If ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UserDao.get_users()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" unsuccessfully retrieves users from the database, it returns ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"None",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".    In this scenario, a status code of 500 is returned with a JSON response object describing the error.  If ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UserDao.get_users()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" successfully retrieves users from the database, it returns a list of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"User",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" model objects.  These objects are converted into Python dictionaries, the data is cleaned, and they are returned in a JSON response body with a status code of 200. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" My API has many endpoints of varying degrees of complexity, so feel free to explore them all on ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/tree/master/api/src/route"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"GitHub",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Route Decorators"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Route Decorators",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" All the functions which are Flask endpoints have decorators attached to them.  The decorator ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@<name>.route()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", where ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"<name>",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is replaced with the variable name of a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Blueprint",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" or ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Flask",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" object, registers a function to handle requests at a specific URL. The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@<name>.route()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" decorator is part of the Flask library. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" You may have noticed that some of my routes have additional decorators.  For example, the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"user()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function, defined in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-api/blob/master/api/src/route/userRoute.py#L78-L99"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"userRoute.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file and displayed again below, has two additional annotations: ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@auth_required()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@disabled()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Python"
        },
        "value":"@user_route.route('/<username>', methods=['GET', 'PUT', 'DELETE'])\n@auth_required()\n@disabled(disabled_methods=[DELETE])\ndef user(username) -> Response:\n    \"\"\"\n    Endpoints for specific users (searching, updating, or deleting)\n    :param username: Username (or email) of a User\n    :return: JSON representation of a user and relevant metadata\n    \"\"\"\n    if request.method == 'GET':\n        ''' [GET] /v2/users/<username> '''\n        return user_by_username_get(username)\n\n    elif request.method == 'PUT':\n        ''' [PUT] /v2/users/<username> '''\n        return user_by_username_put(username)\n\n    elif request.method == 'DELETE':\n        ''' [DELETE] /v2/users/<username> '''\n        return user_by_username_delete(username)\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@auth_required()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a custom decorator that checks for a valid JWT token in the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Authorization",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" header of HTTP requests.  Since most of my endpoints require authentication, placing JWT validation logic in a reusable decorator makes the codebase a lot cleaner.  The code for ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@auth_required()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is shown below and exists in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api/blob/master/api/src/decorators.py#L23-L57"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"decorators.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Python"
        },
        "value":"def auth_required(enabled_methods: Optional[List[HTTPMethod]] = None):\n    \"\"\"\n    Make a custom decorator for endpoints, indicating that authentication is required.\n    :param enabled_methods: HTTP methods (verbs) that require authentication for an endpoint.\n    \"\"\"\n    def decorator(f):\n        @functools.wraps(f)\n        def decorated_function(*args, **kwargs):\n            if enabled_methods and request.method not in enabled_methods:\n                current_app.logger.info(f'Authentication is skipped for {request.method} requests to {request.url}')\n            else:\n                if 'Authorization' not in request.headers:\n                    abort(401)\n\n                authorization_header: str = request.headers['Authorization']\n                token = authorization_header.replace('Bearer ', '')\n\n                async def authenticate():\n                    async with aiohttp.ClientSession() as session:\n                        async with session.post(\n                            url=f\"{current_app.config['AUTH_URL']}/authenticate\",\n                            json={'token': token}\n                        ) as response:\n                            response_body = await response.json()\n                            if not response_body.get('result'):\n                                current_app.logger.info('User Unauthorized')\n                                abort(403)\n                            else:\n                                current_app.logger.info('User Authorized')\n\n                asyncio.run(authenticate())\n\n            return f(*args, **kwargs)\n        return decorated_function\n    return decorator\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@auth_required()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" leverages the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@functools.wraps()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" factory method to create a decorator.  This approach is a Python convention.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@auth_required()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" takes a single keyword argument ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"enabled_methods",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which is an optional list of HTTP methods.  If ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"enabled_methods",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is passed to the decorator, authentication requirements are only enforced for HTTP methods defined in the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"enabled_methods",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" list.  If ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"enabled_methods",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is not passed to the decorator, all HTTP methods that an endpoint responds to will require authentication. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"auth_required()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" first checks if an ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Authorization",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" header exists on the incoming HTTP request.  If the header does not exist, a ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"401",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" HTTP error code is returned to the user. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Next, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"auth_required()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" extracts a JWT from the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Authorization",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" header, placing it in a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"token",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" variable. The value of the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Authorization",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" header follows the pattern ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Bearer j.w.t",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", where ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"j.w.t",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is replaced by the JWT.  This token is used in another asynchronous function ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"authenticate()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which makes an HTTP request to an authentication route in my application.  I host this route using AWS Lambda and AWS API Gateway, which I'll discuss in an upcoming article.  The authentication route is defined in code as ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"\"{current_app.config['AUTH_URL']}/authenticate\"",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", with the domain name coming from the Flask configuration object, specifically the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"'AUTH_URL'",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" property. This is due to the authentication URL being unique in different environments. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"authenticate()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" uses the response from the authentication route, stored in ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"response",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", to determine if the user is permitted to use the API.  The authentication API returns a JSON object with a single boolean ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"result",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" field.  If ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"result",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is true, the user is successfully authenticated.  If ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"result",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is false, the user is not allowed to use the API.  The code is to configured to return a  HTTP 403 error code to the user if ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"result",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is false.  Otherwise, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"authenticate()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" performs no further operations and control is passed through to the route's function handler. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@disabled()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is also a custom decorator that disables a route in the API. If a user tries to call a disabled route, they receive a HTTP 403 error.  The implementation of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@disabled()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is shown below, and exists in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-api/blob/master/api/src/decorators.py#L60-L76"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"decorators.py",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Python"
        },
        "value":"def disabled(disabled_methods: Optional[List[HTTPMethod]] = None):\n    \"\"\"\n    Make a custom decorator for endpoints that are currently disabled and should not be invoked.\n    :param disabled_methods: HTTP methods (verbs) that are disabled and follow the rules of this annotation.\n    \"\"\"\n    def decorator(f):\n        @functools.wraps(f)\n        def decorated_function(*args, **kwargs):\n            if disabled_methods and request.method not in disabled_methods:\n                current_app.logger.info(f'{request.method} requests to {request.url} are not disabled.')\n            else:\n                current_app.logger.info('This endpoint is disabled.')\n                abort(403)\n\n            return f(*args, **kwargs)\n        return decorated_function\n    return decorator\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Similar to ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@auth_required()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@disabled()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is written with the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@functools.wraps()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" factory method and accepts an optional ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"disabled_methods",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" keyword argument, with the  same effect as the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"enabled_methods",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" keyword argument in ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@auth_required()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  If a route has the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@disabled()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" decorator and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"disabled_methods",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" isn't specified, all HTTP methods to that route are disabled and return HTTP 403 errors.  If a route has the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@disabled()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" decorator and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"disabled_methods",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is specified, only the HTTP methods in the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"disabled_methods",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" list return 403 errors.  All other methods continue with normal execution.  In code, HTTP 403 errors are returned from the API with the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"abort(403)",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" command. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Conclusions"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Conclusions",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Writing APIs with Flask is easy and flexible.  Flask is not very opinionated, leaving engineers in control of design choices.  For beginners or junior level programmers, Python is very easy to work with as well, making Flask a good option for large teams with engineers at different skill levels.  All the code for my Flask API is available on ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-api"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"GitHub",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    }
];

preview = content.slice(1, 3);

postName = "dec-24-2021-flask-python-api";
postDate = new Date('2021-12-24T12:00:00');
existingPost = db.posts.findOne({name: postName});

postViews = (existingPost) ? existingPost.views : 0;

db.posts.remove({name: postName});
db.posts_content.remove({name: postName});

db.posts.insertOne({
    name: postName,
    title: "Building an API with Flask and SQLAlchemy",
    description: `In this article, I begin by describing how I structured my SaintsXCTF API, which is written in Flask.  
        Next, I provide an overview of Flask and SQLAlchemy, an object relational mapper (ORM).  Finally, I dive into 
        my API code.`,
    date: postDate,
    type: "Retrospective",
    views: postViews,
    tags: [
        {
            name: "Flask",
            picture: "https://asset.jarombek.com/logos/flask.png",
            color: "flask"
        },
        {
            name: "Python",
            picture: "https://asset.jarombek.com/logos/python.png",
            color: "python"
        },
        {
            name: "API"
        },
        {
            name: "ORM"
        }
    ],
    preview,
    previewString: JSON.stringify(preview),
    sources: [
        {
            startName: "\"Data Access Object\", ",
            endName: "",
            linkName: "https://www.oracle.com/java/technologies/data-access-object.html",
            link: "https://www.oracle.com/java/technologies/data-access-object.html"
        },
        {
            startName: "\"Modular Applications with Blueprints\", ",
            endName: "",
            linkName: "https://flask.palletsprojects.com/en/2.0.x/blueprints/",
            link: "https://flask.palletsprojects.com/en/2.0.x/blueprints/"
        }
    ]
});

db.posts_content.insertOne({
    name: postName,
    date: postDate,
    content,
    contentString: JSON.stringify(content)
});
