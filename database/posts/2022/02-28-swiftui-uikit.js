/**
 * Script for the MongoDB Shell.
 * @author Andrew Jarombek
 * @since 3/5/2022
 */

connection = new Mongo();
db = connection.getDB("jarombekcom");

content = [
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" SwiftUI is a new framework that creates user interfaces for iOS and other Apple operating system applications.  SwiftUI is completely programmatic (user interfaces in SwiftUI are built exclusively by writing Swift code).  This is in stark contrast to previous frameworks such as UIKit which use a combination of Swift or Objective-C code and storyboards. Storyboards are graphical interfaces which allow engineers or designers to build user interfaces without writing code. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" As someone who prefers solutions that involve writing code exclusively, SwiftUI is a welcome addition to the iOS landscape and a positive change in direction from Apple.  Using GUIs such as storyboard to build interfaces have many downsides, such as difficulties when working in large groups on a single UI file and confusing merge conflicts when using version control systems. Since I'm very passionate about programming (as most software engineers are), altering values in a GUI to change a UI is a lot less exciting than coding! ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" This article introduces SwiftUI and walks through a page in an existing iOS application that I converted to SwiftUI from UIKit and Storyboard.  I also describe the steps needed to integrate  SwiftUI components into a UIKit application. All the code discussed in this article comes from my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://apps.apple.com/nz/app/saintsxctf/id1298285886?platform=iphone"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"SaintsXCTF",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" iOS application and lives in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-ios"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saints-xctf-ios",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" repository. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"SwiftUI Overview"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"SwiftUI Overview",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" SwiftUI is a new approach for creating user interfaces in Apple operating system applications, such as iPhone and Apple Watch apps.  Released in September 2019, SwiftUI allows UIs to be built entirely in Swift code.  Apple has ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://developer.apple.com/tutorials/swiftui/creating-and-combining-views"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"excellent tutorials",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" for getting started with SwiftUI and for learning how to code SwiftUI views in XCode. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" SwiftUI is a declarative UI framework, similar to React.js.  Declarative programming frameworks involve coding the desired end state instead of coding iterative commands to achieve an end state.  Behind the scenes, SwiftUI is able to translate the desired end state into iterative commands which build the UI.  Engineers do not need to worry about these details as SwiftUI abstracts them away.  Declarative frameworks are often easier to work with and faster to code in.  A comparison in the front-end programming world is how the declarative library React.js is easier to work with then the iterative library JQuery for building web pages. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"UI Component Overview"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"UI Component Overview",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" In my SaintsXCTF iOS application, the page I converted from UIKit and Storyboard to SwiftUI is the create exercise log page.  When loaded, this page appears like so: ",
                "children":null
            }
        ]
    },
    {
        "el":"inlineimage",
        "attributes":{
            "filename":"2-26-22-exercise-log-view.png",
            "paddingtop":"true",
            "paddingbottom":"true",
            "maxwidth":"60%"
        },
        "value":null,
        "children":[

        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Users enter details about their exercise, such as the time taken and mileage. ",
                "children":null
            }
        ]
    },
    {
        "el":"inlineimage",
        "attributes":{
            "filename":"2-26-22-exercise-log-editing.png",
            "paddingtop":"true",
            "paddingbottom":"true",
            "maxwidth":"60%"
        },
        "value":null,
        "children":[

        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" After entering information about an exercise, users can create the exercise log, which displays it on the application home page and their profile page. ",
                "children":null
            }
        ]
    },
    {
        "el":"inlineimage",
        "attributes":{
            "filename":"2-26-22-exercise-log-created.png",
            "paddingtop":"true",
            "paddingbottom":"true",
            "maxwidth":"60%"
        },
        "value":null,
        "children":[

        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" User's can also edit existing exercise logs and resubmit them. ",
                "children":null
            }
        ]
    },
    {
        "el":"inlineimage",
        "attributes":{
            "filename":"2-26-22-exercise-logs.png",
            "paddingtop":"true",
            "paddingbottom":"true",
            "maxwidth":"60%"
        },
        "value":null,
        "children":[

        ]
    },
    {
        "el":"inlineimage",
        "attributes":{
            "filename":"2-26-22-edit-exercise-log.png",
            "paddingtop":"true",
            "paddingbottom":"true",
            "maxwidth":"60%"
        },
        "value":null,
        "children":[

        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Building Views"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Building Views",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" SwiftUI applications are split into many views (components) that make up the user interface.  For my exercise log page, there are two top level views.  The first, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"CreateExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", is for creating a new exercise log.  The second, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"EditExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", is for editing an existing exercise log. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"CreateExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which is located in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-ios/blob/master/SaintsXCTF/CreateExerciseLogView.swift"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"CreateExerciseLogView.swift",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file, has the following content: ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Swift"
        },
        "value":"import SwiftUI\n\nstruct CreateExerciseLogView: View {\n    @StateObject var log = ExerciseLog()\n    @StateObject var meta = ExerciseLogMeta(isExisting: false)\n    @StateObject var createLog = CreateExerciseLog()\n    @StateObject var form = ExerciseLogForm()\n\n    var body: some View {\n        ExerciseLogView(log: log, meta: meta, createLog: createLog, form: form)\n    }\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"EditExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which is located in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-ios/blob/master/SaintsXCTF/EditExerciseLogView.swift"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"EditExerciseLogView.swift",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file, is coded very similarly. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Swift"
        },
        "value":"import SwiftUI\n\nstruct EditExerciseLogView: View {\n    @ObservedObject var log = ExerciseLog()\n\n    @StateObject var meta = ExerciseLogMeta(isExisting: true)\n    @StateObject var createLog = CreateExerciseLog()\n    @StateObject var form = ExerciseLogForm()\n\n    var body: some View {\n        ExerciseLogView(log: log, meta: meta, createLog: createLog, form: form)\n            .onAppear(perform: {\n                if !meta.existingLogInitialized {\n                    form.displayedTime = log.time\n                }\n            })\n    }\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Both ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"CreateExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"EditExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" are structs of type ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"View",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"View",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" protocol defines a struct that is part of a user interface.  When a custom view is created that follows the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"View",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" protocol, the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"body",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" property of type ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"some View",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" must be implemented.  Both ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"CreateExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"EditExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" have bodies containing an ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" view.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is the main view holding the create/edit exercise log form.  It takes four objects as arguments which help customize the views appearance: ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"log",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"meta",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"createLog",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"form",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" These four variables are initialized with the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@StateObject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" annotation in both ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"CreateExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"EditExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"; except for ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"log",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" in ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"EditExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which is initialized with ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@ObservedObject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  These annotations are property wrappers which label  variables that hold state in Swift views.  Swift views are controlled by application state; every time the state within a view changes, the view re-renders.  For a more in-depth analysis on these annotations, check out ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://www.hackingwithswift.com/quick-start/swiftui/whats-the-difference-between-observedobject-state-and-environmentobject"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" this article on SwiftUI property wrappers",
                        "children":null
                    }
                ]
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"1",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  In short, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@ObservedObject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" holds an object in application state with a value passed from another view. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@StateObject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" also holds an object in application state, but it is initialized within the current view.  In other words, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@ObservedObject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" watches a state object that is owned by another view, while ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@StateObject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" creates a state object in the current view. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" In the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"EditExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" view, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"log",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is annotated with ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@ObservedObject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" because its parent view sends information about a log that needs to be edited.  All the other state objects are created in and owned by ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"CreateExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"EditExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Objects annotated with ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@StateObject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@ObservedObject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" must conform to a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ObservableObject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" protocol.  For example, the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"log",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" object is a class of type ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ExerciseLog",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which is defined in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-ios/blob/master/SaintsXCTF/ExerciseLog.swift"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"ExerciseLog.swift",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Swift"
        },
        "value":"import SwiftUI\n\nclass ExerciseLog: ObservableObject {\n    @Published var id: Int? = nil\n    @Published var name = \"\"\n    @Published var location = \"\"\n    var date = Date()\n    @Published var exerciseType = ExerciseType.run\n    @Published var distance = \"\"\n    @Published var metric = Metric.miles\n    @Published var time = \"\"\n    @Published var feel = 6.0\n    @Published var description = \"\"\n\n    func reset() {\n        name = \"\"\n        location = \"\"\n        date = Date()\n        exerciseType = ExerciseType.run\n        distance = \"\"\n        metric = Metric.miles\n        time = \"\"\n        feel = 6.0\n        description = \"\"\n    }\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ExerciseLog",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" contains properties representing the attributes of an exercise log.  Some of these properties, such as ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"id",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", are annotated with ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@Published",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  When values of properties with the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@Published",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" annotation change, the UI updates accordingly",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"2",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  Properties without ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@Published",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" do not cause UI re-renders when their values change. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"reset()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is simply a helper method to revert properties to their default values. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The other three state objects in ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"CreateExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"EditExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" are coded similarly to ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ExerciseLog",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"meta",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" of type ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ExerciseLogMeta",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" (located in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-ios/blob/master/SaintsXCTF/ExerciseLogMeta.swift"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"ExerciseLogMeta.swift",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"), ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"createLog",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" of type ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"CreateExerciseLog",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" (located in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-ios/blob/master/SaintsXCTF/\nCreateExerciseLog.swift"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"CreateExerciseLog.swift",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"), and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"form",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" of type ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ExerciseLogForm",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" (located in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-ios/blob/master/SaintsXCTF/ExerciseLogForm.swift"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"ExerciseLogForm.swift",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":") are shown below. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Swift"
        },
        "value":"// ExerciseLogMeta.swift\n\nimport SwiftUI\n\nclass ExerciseLogMeta: ObservableObject {\n\n    init(isExisting: Bool) {\n        self.isExistingLog = isExisting\n    }\n\n    var isExistingLog = false\n    var existingLogInitialized = false\n}\n",
        "children":null
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Swift"
        },
        "value":"// CreateExerciseLog.swift\n\nimport SwiftUI\n\nclass CreateExerciseLog: ObservableObject {\n    @Published var creating = false\n    @Published var created = false\n    @Published var error = false\n    @Published var errorMessage: String? = nil\n\n    func createExerciseLog(exerciseLog: ExerciseLog, completion: @escaping () -> Void) -> Void {\n        creating = true\n        created = false\n        error = false\n        errorMessage = nil\n\n        let log = convertToLog(exerciseLog)\n\n        APIClient.logPostRequest(withLog: log, fromController: nil) {\n            (newlog) -> Void in\n\n            self.creating = false\n\n            if newlog != nil {\n                self.created = true\n                completion()\n            } else {\n                self.error = true\n                self.errorMessage = \"Failed to Create New Exercise Log\"\n            }\n        }\n    }\n\n    func updateExerciseLog(newLog: ExerciseLog, existingLog: Log, completion: @escaping () -> Void) -> Void {\n        creating = true\n        created = false\n        error = false\n        errorMessage = nil\n\n        let log = convertToLog(newLog, existingLog)\n        log.log_id = existingLog.log_id\n\n        APIClient.logPutRequest(withLogID: log.log_id!, andLog: log, fromController: nil) {\n            (newlog) -> Void in\n\n            self.creating = false\n\n            if newlog != nil {\n                self.created = true\n                completion()\n            } else {\n                self.error = true\n                self.errorMessage = \"Failed to Create New Exercise Log\"\n            }\n        }\n    }\n\n    func convertToLog(_ exerciseLog: ExerciseLog, _ existingLog: Log = Log()) -> Log {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat = \"yyyy-MM-dd\"\n        let formattedDate = dateFormatter.string(from: exerciseLog.date)\n\n        let timeFormat = \"00:00:00\"\n        let end = timeFormat.index(timeFormat.endIndex, offsetBy: 0 - exerciseLog.time.count - 1)\n        let formattedTime = \"\\(timeFormat[timeFormat.startIndex...end])\\(exerciseLog.time)\"\n\n        let user = SignedInUser.user\n\n        let log = existingLog\n        log.name = exerciseLog.name\n        log.username = user.username\n        log.first = user.first\n        log.last = user.last\n        log.location = exerciseLog.location\n        log.date = formattedDate\n        log.type = exerciseLog.exerciseType.rawValue\n        log.distance = Double(exerciseLog.distance)\n        log.metric = exerciseLog.metric.rawValue\n        log.time = formattedTime\n        log.feel = Int(exerciseLog.feel)\n        log.log_description = exerciseLog.description\n\n        return log\n    }\n}\n",
        "children":null
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Swift"
        },
        "value":"// ExerciseLogForm.swift\n\nclass ExerciseLogForm: ObservableObject {\n    @Published var isEditingName = false\n    @Published var nameStatus = InputStatus.initial\n    @Published var isEditingLocation = false\n    @Published var isEditingDate = false\n    @Published var distanceStatus = InputStatus.initial\n    @Published var isEditingDistance = false\n    @Published var displayedTime = \"\"\n    @Published var timeStatus = InputStatus.initial\n    @Published var isEditingTime = false\n    @Published var isEditingDescription = false\n    @Published var showCanceling = false\n\n    func reset() {\n        nameStatus = InputStatus.initial\n        distanceStatus = InputStatus.initial\n        displayedTime = \"\"\n        timeStatus = InputStatus.initial\n    }\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Slightly different than the others, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"CreateExerciseLog",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" not only contains state data in properties with ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@Published",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" annotations, but also has functions for making API calls. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"createExerciseLog()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"updateExerciseLog()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" make API calls to create and update exercise logs, respectively. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" As previously mentioned, both ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"CreateExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"EditExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" are wrappers around an  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" view, which displays a form to create or edit an exercise log.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which is located in an ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-ios/blob/master/SaintsXCTF/ExerciseLogView.swift"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"ExerciseLogView.swift",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file, is shown below. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Swift"
        },
        "value":"import SwiftUI\n\nstruct ExerciseLogView: View {\n    @EnvironmentObject var existingLog: ExistingLog\n\n    @ObservedObject var log: ExerciseLog\n    @ObservedObject var meta: ExerciseLogMeta\n    @ObservedObject var createLog: CreateExerciseLog\n    @ObservedObject var form: ExerciseLogForm\n\n    var body: some View {\n        ScrollView {\n            VStack(alignment: .leading) {\n                Text(meta.isExistingLog ? \"Edit Exercise Log\" : \"Create Exercise Log\")\n                    .font(.title)\n                    .foregroundColor(.black)\n                    .bold()\n                    .alert(isPresented: $createLog.error) {\n                        Alert(\n                            title: Text(\n                                meta.isExistingLog ?\n                                    \"An unexpected error occurred while updating the exercise log.\" :\n                                    \"An unexpected error occurred while creating an exercise log.\"\n                            ),\n                            primaryButton: .default(\n                                Text(\"Cancel\"),\n                                action: {\n                                    createLog.error = false\n                                }\n                            ),\n                            secondaryButton: .cancel(\n                                Text(\"Try Again\"),\n                                action: {\n                                    createLog.error = false\n\n                                    if meta.isExistingLog {\n                                        createLog.updateExerciseLog(newLog: log, existingLog: existingLog.log ?? Log()) {}\n                                    } else {\n                                        createLog.createExerciseLog(exerciseLog: log) {\n                                            log.reset()\n                                            form.reset()\n                                        }\n                                    }\n                                }\n                            )\n                        )\n                    }\n\n                ExerciseLogFormView(log: log, meta: meta, createLog: createLog, form: form)\n            }\n            .padding()\n            .padding(.top, 20)\n        }\n        .progressViewStyle(\n            CircularProgressViewStyle(tint: Color(UIColor(Constants.saintsXctfRed)))\n        )\n    }\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" In ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", properties ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"log",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"meta",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"createLog",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"form",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" are all annotated with ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@ObservedObject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" because they are owned by parent views and are passed as parameters to the current view.  This view introduces a new property ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"existingLog",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" with an  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@EnvironmentObject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" annotation.  Properties annotated with ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@EnvironmentObject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" are accessible to all other views in the application",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"3",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  You can think of it as SwiftUI's mechanism for global state.  If the user is editing an existing exercise log, the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"existingLog",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" property is populated with its contents. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"body",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" property of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" initializes some elements in the user interface.  The outermost element, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ScrollView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", creates a view with scrollable content",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"3",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The  view inside ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ScrollView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is defined as ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"VStack(alignment: .leading)",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"VStack",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a view whose children are arranged vertically",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"4",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"alignment: .leading",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" argument sets the alignment of children in  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"VStack",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" on the x and y axes",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"5",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  Inside ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"VStack",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Text",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" view, which is the header of the page.  It either contains the text ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"\"Create Exercise Log\"",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" or ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"\"Edit Exercise Log\"",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Method calls can be chained on views to customize them.  For example, the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"Text",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" view has ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"font()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"foregroundColor()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"bold()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"alert()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" method calls attached to it.  The first three methods customize the appearance of the text.  The fourth method, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"alert()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", displays an alert in case an error occurs while creating or editing an exercise log. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" contains another custom view, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ExerciseLogFormView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  It exists in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-ios/blob/master/SaintsXCTF/ExerciseLogFormView.swift"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"ExerciseLogFormView.swift",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file.  This view along with ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"ExerciseLogActionsView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" in the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-ios/blob/master/SaintsXCTF/ExerciseLogActionsView.swift"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"ExerciseLogActionsView.swift",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file make up the remainder of the create/edit exercise log page.  Feel free to view them and use their code in your own projects. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Integrating SwiftUI with UIKit"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Integrating SwiftUI with UIKit",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Integrating SwiftUI views into a UIKit application is relatively straightforward.  The main approach is to wrap SwiftUI views within a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UIViewController",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" class.  For the create/edit exercise log page, I have two ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UIViewController",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" classes that wrap SwiftUI views - ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"CreateExerciseLogViewController",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"EditExerciseLogViewController",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  Both are shown below and are available in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-ios/blob/master/SaintsXCTF/CreateExerciseLogViewController.swift"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"CreateExerciseLogViewController.swift",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-ios/blob/master/SaintsXCTF/EditExerciseLogViewController.swift"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" EditExerciseLogViewController.swift",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" files, respectively. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Swift"
        },
        "value":"// CreateExerciseLogViewController.swift\n\nimport UIKit\nimport SwiftUI\n\nclass CreateExerciseLogViewController: UIViewController {\n    @IBOutlet weak var container: UIView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let childView = UIHostingController(rootView: CreateExerciseLogView())\n        addChild(childView)\n        childView.view.frame = container.bounds\n        container.addSubview(childView.view)\n        childView.didMove(toParent: self)\n    }\n}\n",
        "children":null
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Swift"
        },
        "value":"// EditExerciseLogViewController.swift\n\nimport UIKit\nimport SwiftUI\n\nclass EditExerciseLogViewController: UIViewController {\n    @IBOutlet weak var container: UIView!\n\n    var log: Log? = nil\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let exerciseLog = ExerciseLog()\n\n        if let logObject = log {\n            let dateFormatter = DateFormatter()\n            dateFormatter.dateFormat = \"yyyy-MM-dd\"\n            let dateObject = dateFormatter.date(from: logObject.date) ?? Date()\n\n            exerciseLog.id = logObject.log_id\n            exerciseLog.name = logObject.name\n            exerciseLog.location = logObject.location ?? \"\"\n            exerciseLog.date = dateObject\n            exerciseLog.exerciseType = ExerciseType(rawValue: logObject.type!) ?? ExerciseType.run\n            exerciseLog.distance = logObject.distance != nil ? String(logObject.distance!) : \"\"\n            exerciseLog.metric = Metric(rawValue: logObject.metric!) ?? Metric.miles\n            exerciseLog.time = logObject.time ?? \"\"\n            exerciseLog.feel = Double(logObject.feel)\n            exerciseLog.description = logObject.log_description ?? \"\"\n        }\n\n        let existingLog = ExistingLog(log ?? Log())\n\n        let childView = UIHostingController(rootView: EditExerciseLogView(log: exerciseLog).environmentObject(existingLog))\n        addChild(childView)\n        childView.view.frame = container.bounds\n        container.addSubview(childView.view)\n        childView.didMove(toParent: self)\n    }\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Within both the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"CreateExerciseLogViewController",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"EditExerciseLogViewController",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" views, a variable ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"container",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" of type ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UIView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" exists.  This container view holds SwiftUI views.  Configuring ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"container",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" to hold SwiftUI views is done within the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"viewDidLoad()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" method. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UIHostingController()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" class is used to create a UIKit view controller for SwiftUI views",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"6",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  Once a SwiftUI view is wrapped within a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UIHostingController()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" instance, it can be added as a subview to a UIKit view. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The main difference between ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"CreateExerciseLogViewController",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"EditExerciseLogViewController",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is that ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"CreateExerciseLogViewController",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" wraps SwiftUI views within UIKit using ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UIHostingController(rootView: CreateExerciseLogView())",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"EditExerciseLogViewController",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" wraps SwiftUI views within UIKit using ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"UIHostingController(rootView: EditExerciseLogView(log: exerciseLog).environmentObject(existingLog))",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". The SwiftUI view ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"CreateExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" takes no arguments while ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"EditExerciseLogView",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" takes a single ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"log",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" argument.  The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"exerciseLog",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" object passed to ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"EditExerciseLogView()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is assigned to a property annotated with ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@ObservedObject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  Similarly, the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"exerciseLog",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" object passed to ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"EditExerciseLogView().environmentObject()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is assigned to a property annotated with ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"@EnvironmentObject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Conclusions"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Conclusions",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" With the addition of SwiftUI, I'm excited to create user interfaces in Apple applications again!  Configuring user interfaces in code using Swift is fun and I can't wait to learn more.  All the code discussed in this article is available in my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-ios"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saints-xctf-ios",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" repository on GitHub. ",
                "children":null
            }
        ]
    }
];

preview = content.slice(0, 2);

postName = "feb-28-2022-swiftui-uikit";
postDate = new Date('2022-02-28T12:00:00');
existingPost = db.posts.findOne({name: postName});

postViews = (existingPost) ? existingPost.views : 0;

db.posts.remove({name: postName});
db.posts_content.remove({name: postName});

db.posts.insertOne({
    name: postName,
    title: "Creating SwiftUI Components Within a UIKit iOS Application",
    description: `This article introduces SwiftUI and walks through a page in an existing iOS application that I 
        converted to SwiftUI from UIKit and Storyboard.  I also describe the steps needed to integrate SwiftUI 
        components into a UIKit application.`,
    date: postDate,
    type: "Discovery",
    views: postViews,
    tags: [
        {
            name: "SwiftUI",
            picture: "https://asset.jarombek.com/logos/swiftui.png",
            color: "swiftui"
        },
        {
            name: "Swift",
            picture: "https://asset.jarombek.com/logos/swift.png",
            color: "swift"
        },
        {
            name: "iOS",
            picture: "https://asset.jarombek.com/logos/ios.png",
            color: "ios"
        }
    ],
    preview,
    previewString: JSON.stringify(preview),
    sources: [
        {
            startName: "\"What’s the difference between @ObservedObject, @State, and @EnvironmentObject?\", ",
            endName: "",
            linkName: "https://www.hackingwithswift.com/quick-start/swiftui/whats-the-difference-between-observedobject-state-and-environmentobject",
            link: "https://www.hackingwithswift.com/quick-start/swiftui/whats-the-difference-between-observedobject-state-and-environmentobject"
        },
        {
            startName: "\"Published\", ",
            endName: "",
            linkName: "https://developer.apple.com/documentation/combine/published",
            link: "https://developer.apple.com/documentation/combine/published"
        },
        {
            startName: "\"ScrollView\", ",
            endName: "",
            linkName: "https://developer.apple.com/documentation/swiftui/scrollview",
            link: "https://developer.apple.com/documentation/swiftui/scrollview"
        },
        {
            startName: "\"VStack\", ",
            endName: "",
            linkName: "https://developer.apple.com/documentation/swiftui/vstack",
            link: "https://developer.apple.com/documentation/swiftui/vstack"
        },
        {
            startName: "\"Alignment\", ",
            endName: "",
            linkName: "https://developer.apple.com/documentation/swiftui/alignment",
            link: "https://developer.apple.com/documentation/swiftui/alignment"
        },
        {
            startName: "\"UIHostingController\", ",
            endName: "",
            linkName: "https://developer.apple.com/documentation/swiftui/uihostingcontroller",
            link: "https://developer.apple.com/documentation/swiftui/uihostingcontroller"
        }
    ]
});

db.posts_content.insertOne({
    name: postName,
    date: postDate,
    content,
    contentString: JSON.stringify(content)
});
