/**
 * Script for the MongoDB Shell.
 * @author Andrew Jarombek
 * @since 1/22/2022
 */

connection = new Mongo();
db = connection.getDB("jarombekcom");

content = [
    {
        "el":"note",
        "attributes":{
            "type":"info"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" This is part of a series of articles on SaintsXCTF Version 2.0. The first article in the series provides an ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog/jun-14-2021-saints-xctf-v2-overview"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"overview of the application",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  You ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"DO NOT",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" need to read prior articles in the series to fully understand this article. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" My ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://saintsxctf.com/"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"SaintsXCTF",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" application has multiple APIs.  One of these APIs, ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"fn.saintsxctf.com",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", is hosted on AWS API Gateway and AWS Lambda.  Its main purpose is to send emails to users based on certain website actions, such as changing a password or registering.  In this article, I discuss the infrastructure needed to make the API, the source code of the API endpoints, and the approach used to deploy the API to AWS. ",
                "children":null
            }
        ]
    },
    {
        "el":"subtitle",
        "attributes":{
            "title":"SaintsXCTF Version 2.0 Articles"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"SaintsXCTF Version 2.0 Articles",
                "children":null
            }
        ]
    },
    {
        "el":"ul",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/jun-14-2021-saints-xctf-v2-overview"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Architectural Overview",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/jun-14-2021-saints-xctf-v2-overview"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"AWS Infrastructure",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/oct-25-2021-saints-xctf-v2-k8s-infrastructure"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Kubernetes Infrastructure",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/nov-1-2021-saints-xctf-v2-react-web-app"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"React Web Application Overview",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/nov-15-2021-react-typescript"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Web Application React and TypeScript",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/dec-3-2021-redux-react"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Web Application Redux State Configuration",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/aug-11-2021-cypress-typescript"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Web Application Cypress E2E Tests",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/jun-30-2021-react-jss"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Web Application JSS Modular Design",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/dec-24-2021-flask-python-api"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Flask Python API",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/jan-10-2022-flask-api-testing"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Flask API Testing",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"strong",
                        "attributes":null,
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Function API Using API Gateway & Lambda",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/feb-18-2022-auth-api"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Auth API Using API Gateway & Lambda",
                                "children":null
                            }
                        ]
                    }
                ]
            },
            {
                "el":"li",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"a",
                        "attributes":{
                            "href":"https://jarombek.com/blog/mar-27-2022-mysql-client-kubernetes"
                        },
                        "value":null,
                        "children":[
                            {
                                "el":"#text",
                                "attributes":null,
                                "value":"Database Client on Kubernetes",
                                "children":null
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"API Infrastructure"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"API Infrastructure",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The Infrastructure for my API that sends emails is written using Terraform and exists in my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-infrastructure/tree/master/saints-xctf-com-fn"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saints-xctf-infrastructure",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" repository.  The Terraform configuration contains three modules, two of which I'll discuss in this article: ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-infrastructure/tree/master/saints-xctf-com-fn/modules/api-gateway"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"api-gateway",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-infrastructure/tree/master/saints-xctf-com-fn/modules/email-lambda"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" email-lambda",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"api-gateway",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" contains API Gateway infrastructure, and ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"email-lambda",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" contains AWS Lambda infrastructure. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The following infrastructure diagram represents the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"fn.saintsxctf.com",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" API. ",
                "children":null
            }
        ]
    },
    {
        "el":"inlineimage",
        "attributes":{
            "filename":"2-5-22-api-infrastructure.png",
            "paddingtop":"true",
            "paddingbottom":"true"
        },
        "value":null,
        "children":[

        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" This infrastructure creates a REST API that clients can access over HTTPS.  For example, clients can make a  POST request to the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"https://fn.saintsxctf.com/email/welcome",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" endpoint to send a \"welcome\" email.  API Gateway handles HTTP requests to endpoints and triggers corresponding AWS Lambda functions.  Once an AWS Lambda function completes, its result is returned back to API Gateway and sent to the client in a HTTP response body. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Infrastructure for AWS API Gateway is centered around a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-infrastructure/blob/master/saints-xctf-com-fn/modules/api-gateway/main.tf"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"main.tf",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file within the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-infrastructure/tree/master/saints-xctf-com-fn/modules/api-gateway"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" api-gateway",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" Terraform module.  Infrastructure for AWS Lambda is centered around a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-infrastructure/blob/master/saints-xctf-com-fn/modules/email-lambda/main.tf"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"main.tf",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file within the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-infrastructure/tree/master/saints-xctf-com-fn/modules/\nemail-lambda"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"email-lambda",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" Terraform module.  I won't discuss infrastructure specifics, but if you want to learn more about writing Terraform for AWS API Gateway and AWS Lambda I wrote ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog/\nsep-7-2018-aws-lambda-api-gateway"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"an article",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" about it in the past. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Endpoint Application Code"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Endpoint Application Code",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The API endpoints are configured as AWS Lambda functions written in JavaScript.  All the Lambda functions exist in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-functions"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saints-xctf-functions",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" repository on GitHub. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Since most endpoints in the API are similar, let's look at a single endpoint, ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" https://fn.saintsxctf.com/email/welcome",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", in detail.  This endpoint sends a welcome email to new users when they initially sign up.  A sample welcome email is displayed below. ",
                "children":null
            }
        ]
    },
    {
        "el":"inlineimage",
        "attributes":{
            "filename":"2-5-22-welcome-email.png",
            "paddingtop":"true",
            "paddingbottom":"true"
        },
        "value":null,
        "children":[

        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Lambda function code for the welcome email endpoint exists in an npm module.  The module has two entrypoint files: ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-functions/blob/main/welcome/sendEmailAWS.js"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"sendEmailAWS.js",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-functions/blob/main/welcome/sendEmailNode.js"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"sendEmailNode.js",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"sendEmailAWS.js",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is used for sending emails from AWS Lambda and ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"sendEmailNode.js",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is used for sending emails locally. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JavaScript"
        },
        "value":"// sendEmailAWS.js\n\nconst AWS = require('aws-sdk');\nconst sendWelcomeEmail = require('./email');\n\nAWS.config.update({region: 'us-east-1'});\n\n/**\n * Invoke an AWS function via the handler object\n * @param event - information about the AWS Lambda function request\n * @param context - runtime information regarding the AWS lambda function\n * @param callback - used to return information back to the caller.\n */\nexports.sendWelcomeEmail = (event, context, callback) => {\n    try {\n        sendWelcomeEmail(event.to, event.firstName, event.lastName, event.username);\n        callback(null, true);\n    } catch (err) {\n        console.error(err);\n        callback(Error(err), false);\n    }\n};\n",
        "children":null
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JavaScript"
        },
        "value":"// sendEmailNode.js\n\nconst sendWelcomeEmail = require('./email');\n\nconst [_, __, to, firstName, lastName, username] = process.argv;\n\nsendWelcomeEmail(to, firstName, lastName, username);\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"sendEmailNode.js",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is great for testing. It makes sending an email as simple as running the following command from the command line. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Bash"
        },
        "value":"node sendEmailNode andrew@jarombek.com Andrew Jarombek andy\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" In ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"sendEmailAWS.js",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"exports.sendWelcomeEmail()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is the main function.  In the Lambda function's ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-infrastructure/blob/master/\nsaints-xctf-com-fn/modules/email-lambda/main.tf#L42"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Terraform",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-infrastructure/blob/master/saints-xctf-com-fn/modules/email-lambda/main.tf#L72"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"configuration",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":",  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"exports.sendWelcomeEmail",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is configured as the entrypoint to the AWS Lambda function using the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"handler",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" attribute. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" In ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"sendWelcomeEmail()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"event",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" argument holds values sent by users invoking the API.  These values are sent via a JSON request body.  Values include the recipient's email address (",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"to",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":") and the first name  (",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"firstName",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"), last name (",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"lastName",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":"), and username (",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"username",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":") of the new user. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"to",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is the address that receives the email and the other three fields replace values in a templated email body (which I discuss soon). ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Both ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"sendEmailNode.js",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"sendEmailAWS.js",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" invoke a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"sendWelcomeEmail()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"sendWelcomeEmail()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is imported from a  ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"./email.js",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file with the line ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"const sendWelcomeEmail = require('./email')",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  This file is shown below. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JavaScript"
        },
        "value":"// email.js\n\nconst send = require('aws-lambda-emails');\n\n/**\n * Send a welcome email to a new user.\n * @param to Recipient email address.\n * @param firstName First name of the new user.\n * @param lastName Last name of the new user.\n * @param username Unique username of the new user.\n */\nfunction sendWelcomeEmail(to, firstName, lastName, username) {\n    const subject = \"Welcome to SaintsXCTF\";\n    const attachments = [\n        {\n            filename: 'saintsxctf.png',\n            path: './assets/saintsxctf.png',\n            cid: 'saintsxctf@jarombek.com'\n        }\n    ];\n\n    const htmlFilename=\"email\";\n    const cssFilename=\"email\";\n\n    const replacementValues = {\n        firstName,\n        lastName,\n        username,\n        prefix: process.env.PREFIX || ''\n    };\n\n    send(subject, to, attachments, htmlFilename, cssFilename, replacementValues);\n}\n\nmodule.exports = sendWelcomeEmail;\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"sendWelcomeEmail()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" invokes a ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"send()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" method from an ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/aws-lambda-emails"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"aws-lambda-emails",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" npm module I created.  The ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"send()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" method takes care of sending the email, but takes parameters to configure how the email is composed. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"send()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is invoked with the line ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"send(subject, to, attachments, htmlFilename, cssFilename, replacementValues)",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":". ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"subject",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is the title of the email and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"to",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is the recipients email address. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"attachments",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is a list of attachments for the email.  In the case of the welcome email, there is a single ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-functions/blob/main/welcome/assets/\nsaintsxctf.png"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saintsxctf.png",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" image attachment.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"htmlFilename",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"cssFilename",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" are the names of the HTML and CSS files that form the email body.  In the welcome email code, both these variables have a value of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"email",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", which references ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-functions/blob/main/welcome/\nemail.html"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"email.html",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/saints-xctf-functions/blob/main/welcome/\nemail.css"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"email.css",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" files in my repository.  ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"email.html",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is shown below. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"HTML"
        },
        "value":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Welcome to SaintsXCTF</title>\n</head>\n<body bgcolor=\"#f6f8f1\">\n<table class=\"emailBody\" width=\"100%\" bgcolor=\"#f6f8f1\" border=\"0\"\n       cellpadding=\"0\" cellspacing=\"0\">\n  <tr>\n    <td>\n      <div class=\"emailContent\">\n        <table class=\"emailMain\" width=\"100%\" align=\"center\" border=\"0\"\n               cellpadding=\"10\" cellspacing=\"10\">\n          <tr>\n            <td>\n              <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n                <tr>\n                  <td>\n                    <table class=\"emailHeader\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                      <tbody>\n                      <tr>\n                        <td>\n                          <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                            <tbody>\n                            <tr>\n                              <td width=\"80\" height=\"80\">\n                                <img class=\"emailLogo\" src=\"cid:saintsxctf@jarombek.com\" alt=\"\"/>\n                              </td>\n                              <td>\n                                <p class=\"emailTitle\">\n                                  SaintsXCTF\n                                </p>\n                              </td>\n                            </tr>\n                            </tbody>\n                          </table>\n                        </td>\n                      </tr>\n                      </tbody>\n                    </table>\n                    <p class=\"emailh5\">\n                      Welcome to SaintsXCTF\n                    </p>\n                    <p class=\"emailp\">\n                      Hello {{firstName}} {{lastName}},\n                    </p>\n                    <p class=\"emailp\">\n                      Welcome to SaintsXCTF, an application for logging exercises with your Cross\n                      Country and Track & Field teams. Your username is <b>{{username}}</b>.\n                    </p>\n                    <p class=\"emailp\">\n                      If you experience any issues using the website, please contact Andrew\n                      Jarombek at <b>andrew@jarombek.com</b> (or if you are currently a St.\n                      Lawrence athlete, contact a member of the coaching staff). I won't be able\n                      to fix issues if I don't know they exist, so your help is appreciated!\n                    </p>\n                    <p class=\"emailp\">\n                      I hope you enjoy the website and have a great journey at St. Lawrence\n                      University!\n                    </p>\n                    <p class=\"emailp\">\n                      - Andrew Jarombek (Website Creator & Class of 2017)\n                    </p>\n                    <table class=\"buttonContainer\" align=\"center\"\n                           border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                      <tbody>\n                      <tr>\n                        <td align=\"center\">\n                          <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                            <tbody>\n                            <tr>\n                              <td class=\"button\" height=\"40\" width=\"250\">\n                                <a href=\"https://{{prefix}}saintsxctf.com\">\n                                  BEGIN LOGGING EXERCISES\n                                </a>\n                              </td>\n                            </tr>\n                            </tbody>\n                          </table>\n                        </td>\n                      </tr>\n                      </tbody>\n                    </table>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n        </table>\n      </div>\n    </td>\n  </tr>\n</table>\n</body>\n</html>\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Take note of words in the email surrounded by double curly braces, such as ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"{{firstName}}",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"{{lastName}}",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"{{username}}",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  These are template variables that are replaced with values when the email is rendered.  This is where the final parameter of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"send()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"replacementValues",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", comes into play. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"replacementValues",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" is an object where the field names are the template variables (such as ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"{{firstName}}",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":") and the field values are the replacement values (such as ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Andy",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":").  This approach allows me to create personalized emails for users of the SaintsXCTF website. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The last piece of the puzzle is the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"send()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function in the ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" aws-lambda-emails",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" module.  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"send()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" exists in a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/aws-lambda-emails/blob/master/index.js"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"index.js",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" file. ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JavaScript"
        },
        "value":"const AWS = require('aws-sdk');\nconst nodemailer = require('nodemailer');\nconst fs = require('fs');\nconst juice = require('juice');\n\n/**\n * Main function to configure and send an email.\n * @param subject The subject line of the email.\n * @param to Who the email is sent to.\n * @param attachments Email attachment files.\n * @param htmlFilename Name of the html file to use for the email body.\n * @param cssFilename Name of the css file used to style the email body.\n * @param replacementValues Values in the HTML file to replace.  The name of the properties in the\n * object matches values in the html to replace.  These properties values are the\n * replacement values.\n */\nfunction send(subject, to=\"andrew@jarombek.com\", attachments = [], htmlFilename=\"email\",\n                   cssFilename=\"email\", replacementValues = {}) {\n\n    // Read the contents of the HTML and CSS files to send with the email\n    let html = fs.readFileSync(`./${htmlFilename}.html`, 'utf8');\n    const css = fs.readFileSync(`./${cssFilename}.css`, 'utf8');\n\n    // Replace the templates in the HTML\n    for (const key in replacementValues) {\n        html = replace(html, key, replacementValues[key]);\n    }\n\n    // Inline the CSS styles in the HTML document\n    const styledHtml = juice.inlineContent(html, css);\n\n    const secretsManager = new AWS.SecretsManager({ region: 'us-east-1' });\n    secretsManager.getSecretValue({ SecretId: 'google-account-secret' }, (err, data) => {\n        if (err) {\n            console.error(err);\n        } else {\n            const { SecretString } = data;\n            const secretObject = JSON.parse(SecretString);\n            const password = secretObject.password;\n\n            const transport = createTransport(password);\n            sendMail(transport, subject, to, attachments, styledHtml);\n        }\n    });\n}\n\n/**\n * Configure how the email is transported.\n * @param password Application specific Gmail password used to send emails in a secure manner.\n */\nfunction createTransport(password) {\n    return nodemailer.createTransport({\n        host: 'smtp.gmail.com',\n        port: 465,\n        secure: true,\n        auth: {\n            user: 'andrew@jarombek.com',\n            pass: password\n        }\n    });\n}\n\n/**\n * Helper method to send the email and check for errors.\n * @param transport Transport object used to send emails.\n * @param subject The subject line of the email.\n * @param to Who the email is sent to.\n * @param attachments Email attachment files.\n * @param html Styled HTML file used as the email body.\n */\nfunction sendMail(transport, subject, to, attachments, html) {\n    transport.sendMail({\n        from: 'Andrew Jarombek<andrew@jarombek.com>',\n        to,\n        subject,\n        html,\n        attachments\n    }, (err) => {\n        if (err) {\n            console.error(`Something went wrong sending mail: ${err}`);\n        }\n    });\n}\n\n/**\n * Replace a template item in a string.  Templates are denoted by the {{<template>}} pattern\n * @param string -The string with the template items\n * @param substring The <template> identifier\n * @param replacement String that will replace the template item\n * @return {Object|string|void|*} A new string - note strings are immutable so a new string\n * object will be made.\n */\nfunction replace(string, substring, replacement) {\n    return string.replace(`{{${substring}}}`, replacement);\n}\n\nmodule.exports = send;\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" I included ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"send()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and all its helper functions in the code above.  At its core, the code uses a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://nodemailer.com/about/"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"nodemailer",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" module to send emails. ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"nodemailer.createTransport()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" configures the transportation layer of the email by authenticating with my Gmail account.  My Gmail account password is stored on AWS Secrets Manager and is retrieved with the ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"secretsManager.getSecretValue({ SecretId: 'google-account-secret' })",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function call.  It's important to note that for this code to work for you, you also need an AWS account with a secret of the same name.  For local development purposes only, you can hardcode the account password instead. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"transport.sendMail({...})",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" sends an email based on the arguments passed to ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"send()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  Before this method is called, the email body is configured and  styled within ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"send()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The following few lines from  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"send()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" generates the email body: ",
                "children":null
            }
        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"JavaScript"
        },
        "value":"// Read the contents of the HTML and CSS files to send with the email\nlet html = fs.readFileSync(`./${htmlFilename}.html`, 'utf8');\nconst css = fs.readFileSync(`./${cssFilename}.css`, 'utf8');\n\n// Replace the templates in the HTML\nfor (const key in replacementValues) {\n    html = replace(html, key, replacementValues[key]);\n}\n\n// Inline the CSS styles in the HTML document\nconst styledHtml = juice.inlineContent(html, css);\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" At the top of ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"send()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", Node.js'  ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"fs",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" module reads the email's HTML and CSS files into ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"html",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" and ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"css",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" variables, respectively.  I also iterate through all the key-value pairs in ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"replacementValues",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", replacing the templates with their designated values in the HTML.  This is accomplished with the help of my ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"replace()",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" function. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"juice.inlineContent(html, css)",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" uses the ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://www.npmjs.com/\npackage/juice"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"juice",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" library to inline CSS styles in HTML elements",
                "children":null
            },
            {
                "el":"sup",
                "attributes":null,
                "value":"1",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The result, ",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"styledHtml",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", is the HTML sent in the email body. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Deployment Approach"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Deployment Approach",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The approach for deploying the API and its corresponding AWS Lambda functions is a CI/CD pipeline in the form of a ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://jarombek.com/blog?query=jenkins&page=1"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Jenkins",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" job.  Jenkins is a CI/CD platform that I've discussed many times in the past.  Jenkins jobs are pipelines written in Groovy that automate tasks such as deploying an application to a specific environment or unit testing source code. ",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" The ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/global-jenkins-jobs/blob/master/saints-xctf/infrastructure/\ncreate-saints-xctf-com-fn/Jenkinsfile.groovy"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Jenkins job",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" for my API contains two general steps: creating AWS Lambda Zip files and applying Terraform infrastructure.  The ",
                "children":null
            },
            {
                "el":"strong",
                "attributes":null,
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"Jenkinsfile",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" for the Jenkins job, shown below, utilizes some helper functions from my ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/global-jenkins-library"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":" global-jenkins-library",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" repository. ",
                "children":null
            }
        ]
    },
    {
        "el":"inlineimage",
        "attributes":{
            "filename":"2-5-22-jenkins-job.png",
            "paddingtop":"true",
            "paddingbottom":"true"
        },
        "value":null,
        "children":[

        ]
    },
    {
        "el":"codesnippet",
        "attributes":{
            "language":"Groovy"
        },
        "value":"@Library(['global-jenkins-library@master']) _\n\npipeline {\n    agent {\n        label 'master'\n    }\n    parameters {\n        booleanParam(\n            name: 'autoApply',\n            defaultValue: true,\n            description: \"Whether the Terraform infrastructure should be automatically approved.\"\n        )\n        choice(\n            name: 'environment',\n            choices: ['dev', 'prod'],\n            description: 'Environment to build the infrastructure in.'\n        )\n    }\n    options {\n        ansiColor('xterm')\n        timeout(time: 1, unit: 'HOURS')\n        buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '5'))\n    }\n    stages {\n        stage(\"Clean Workspace\") { steps { script { cleanWs() } } }\n        stage(\"Checkout Repositories\") { steps { script { checkoutRepos() } } }\n        stage(\"Get Lambda Zip Files\") { steps { script { createLambdaZipFiles() } } }\n        stage(\"Terraform Init\") { steps { script { terraformInit() } } }\n        stage(\"Terraform Validate\") { steps { script { terraformValidate() } } }\n        stage(\"Terraform Plan\") { steps { script { terraformPlan() } } }\n        stage(\"Terraform Apply\") {\n            when {\n                allOf {\n                    environment name: 'TERRAFORM_NO_CHANGES', value: 'false'\n                    environment name: 'TERRAFORM_PLAN_ERRORS', value: 'false'\n                }\n            }\n            steps { script { terraformApply() } }\n        }\n    }\n    post {\n        always {\n            script {\n                postScript()\n            }\n        }\n    }\n}\n\ndef checkoutRepos() {\n    genericsteps.checkoutRepo('saints-xctf-infrastructure', 'master')\n    genericsteps.checkoutRepo('saints-xctf-functions', 'main')\n}\n\ndef createLambdaZipFiles() {\n    dir('repos/saints-xctf-functions/forgot-password') {\n        sh \"\"\"\n            yarn install --production=true\n            zip -r9 SaintsXCTFForgotPasswordEmail.zip .\n            cp SaintsXCTFForgotPasswordEmail.zip ../../saints-xctf-infrastructure/saints-xctf-com-fn/modules/email-lambda\n        \"\"\"\n    }\n\n    dir('repos/saints-xctf-functions/send-activation') {\n        sh \"\"\"\n            yarn install --production=true\n            zip -r9 SaintsXCTFActivationCodeEmail.zip .\n            cp SaintsXCTFActivationCodeEmail.zip ../../saints-xctf-infrastructure/saints-xctf-com-fn/modules/email-lambda\n        \"\"\"\n    }\n\n    dir('repos/saints-xctf-functions/report') {\n        sh \"\"\"\n            yarn install --production=true\n            zip -r9 SaintsXCTFReportEmail.zip .\n            cp SaintsXCTFReportEmail.zip ../../saints-xctf-infrastructure/saints-xctf-com-fn/modules/email-lambda\n        \"\"\"\n    }\n\n    dir('repos/saints-xctf-functions/welcome') {\n        sh \"\"\"\n            yarn install --production=true\n            zip -r9 SaintsXCTFWelcomeEmail.zip .\n            cp SaintsXCTFWelcomeEmail.zip ../../saints-xctf-infrastructure/saints-xctf-com-fn/modules/email-lambda\n        \"\"\"\n    }\n\n    dir('repos/saints-xctf-functions/upload-profile-picture') {\n        sh \"\"\"\n            yarn install --production=true\n            zip -r9 SaintsXCTFUassetUser.zip .\n            cp SaintsXCTFUassetUser.zip ../../saints-xctf-infrastructure/saints-xctf-com-fn/modules/uasset-lambda\n        \"\"\"\n    }\n\n    dir('repos/saints-xctf-functions/upload-group-picture') {\n        sh \"\"\"\n            yarn install --production=true\n            zip -r9 SaintsXCTFUassetGroup.zip .\n            cp SaintsXCTFUassetGroup.zip ../../saints-xctf-infrastructure/saints-xctf-com-fn/modules/uasset-lambda\n        \"\"\"\n    }\n}\n\ndef terraformInit() {\n    INFRA_DIR = \"repos/saints-xctf-infrastructure/saints-xctf-com-fn/env/$params.environment\"\n    terraform.terraformInit(INFRA_DIR)\n}\n\ndef terraformValidate() {\n    terraform.terraformValidate(INFRA_DIR)\n}\n\ndef terraformPlan() {\n    terraform.terraformPlan(INFRA_DIR)\n}\n\ndef terraformApply() {\n    terraform.terraformApply(INFRA_DIR, params.autoApply)\n}\n\ndef postScript() {\n    email.sendEmail(\n        \"Create ${params.environment.toUpperCase()} SaintsXCTF Functions AWS Infrastructure\",\n        \"\",\n        env.JOB_NAME,\n        currentBuild.result,\n        env.BUILD_NUMBER,\n        env.BUILD_URL\n    )\n\n    cleanWs()\n}\n",
        "children":null
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" Note that this pipeline is able to deploy infrastructure to development (",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"dev",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":") and production (",
                "children":null
            },
            {
                "el":"code",
                "attributes":{
                    "className":"jarombek-inline-code"
                },
                "value":"prod",
                "children":null
            },
            {
                "el":"#text",
                "attributes":null,
                "value":") environments. Running this pipeline is the only step needed to deploy a new version of the API to AWS. ",
                "children":null
            }
        ]
    },
    {
        "el":"sectiontitle",
        "attributes":{
            "title":"Conclusions"
        },
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":"Conclusions",
                "children":null
            }
        ]
    },
    {
        "el":"p",
        "attributes":null,
        "value":null,
        "children":[
            {
                "el":"#text",
                "attributes":null,
                "value":" This approach of building an API with AWS API Gateway and AWS Lambda is great for small APIs with a few endpoints. These API endpoints that send emails are a good fit for AWS Lambda because they run infrequently and are not very time sensitive.  Due to the nature of AWS Lambda function cold starts, these endpoints sometimes take over a second to execute, which would be unacceptable for more performance-critical endpoints.  For more complex APIs written with AWS Lambda, I'd recommend trying a more sophisticated framework such as ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://www.serverless.com/framework/\ndocs/getting-started"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"serverless",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":".  The code discussed in this article is available in ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/saints-xctf-functions"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saints-xctf-functions",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/\nsaints-xctf-infrastructure/tree/master/saints-xctf-com-fn"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"saints-xctf-infrastructure",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/\nAJarombek/aws-lambda-emails"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"aws-lambda-emails",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":", and ",
                "children":null
            },
            {
                "el":"a",
                "attributes":{
                    "href":"https://github.com/AJarombek/global-jenkins-jobs/tree/\nmaster/saints-xctf/infrastructure/create-saints-xctf-com-fn"
                },
                "value":null,
                "children":[
                    {
                        "el":"#text",
                        "attributes":null,
                        "value":"global-jenkins-jobs",
                        "children":null
                    }
                ]
            },
            {
                "el":"#text",
                "attributes":null,
                "value":" repositories. ",
                "children":null
            }
        ]
    }
];

preview = content.slice(1, 3);

postName = "feb-5-2022-function-api";
postDate = new Date('2022-02-05T12:00:00');
existingPost = db.posts.findOne({name: postName});

postViews = (existingPost) ? existingPost.views : 0;

db.posts.remove({name: postName});
db.posts_content.remove({name: postName});

db.posts.insertOne({
    name: postName,
    title: "Building an API for Sending Emails with AWS Lambda and API Gateway",
    description: `In this article, I discuss the infrastructure needed to make an API for sending emails, the source 
        code of the API endpoints, and the approach used to deploy the API to AWS.`,
    date: postDate,
    type: "Retrospective",
    views: postViews,
    tags: [
        {
            name: "AWS Lambda",
            picture: "https://asset.jarombek.com/logos/awslambda.png",
            color: "awslambda"
        },
        {
            name: "API Gateway",
            picture: "https://asset.jarombek.com/logos/apigateway.svg",
            color: "apigateway"
        },
        {
            name: "AWS",
            picture: "https://asset.jarombek.com/logos/aws.png",
            color: "aws"
        },
        {
            name: "Terraform",
            picture: "https://asset.jarombek.com/logos/terraform.png",
            color: "terraform"
        },
        {
            name: "JavaScript",
            picture: "https://asset.jarombek.com/logos/js.png",
            color: "javascript"
        },
        {
            name: "Jenkins",
            picture: "https://asset.jarombek.com/logos/jenkins.png",
            color: "jenkins"
        },
        {
            name: "HCL"
        }
    ],
    preview,
    previewString: JSON.stringify(preview),
    sources: [
        {
            startName: "\"Juice\", ",
            endName: "",
            linkName: "https://www.npmjs.com/package/juice",
            link: "https://www.npmjs.com/package/juice"
        }
    ]
});

db.posts_content.insertOne({
    name: postName,
    date: postDate,
    content,
    contentString: JSON.stringify(content)
});
